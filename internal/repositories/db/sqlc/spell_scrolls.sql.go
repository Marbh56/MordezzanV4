// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spell_scrolls.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSpellScroll = `-- name: CreateSpellScroll :execresult
INSERT INTO spell_scrolls (
  spell_id, casting_level, cost, weight, description
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateSpellScrollParams struct {
	SpellID      int64
	CastingLevel int64
	Cost         float64
	Weight       int64
	Description  sql.NullString
}

func (q *Queries) CreateSpellScroll(ctx context.Context, arg CreateSpellScrollParams) (sql.Result, error) {
	return q.exec(ctx, q.createSpellScrollStmt, createSpellScroll,
		arg.SpellID,
		arg.CastingLevel,
		arg.Cost,
		arg.Weight,
		arg.Description,
	)
}

const deleteSpellScroll = `-- name: DeleteSpellScroll :execresult
DELETE FROM spell_scrolls
WHERE id = ?
`

func (q *Queries) DeleteSpellScroll(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteSpellScrollStmt, deleteSpellScroll, id)
}

const getSpellScroll = `-- name: GetSpellScroll :one
SELECT 
    ss.id, 
    ss.spell_id, 
    s.name as spell_name,
    ss.casting_level, 
    ss.cost, 
    ss.weight, 
    ss.description, 
    ss.created_at, 
    ss.updated_at
FROM spell_scrolls ss
JOIN spells s ON ss.spell_id = s.id
WHERE ss.id = ? LIMIT 1
`

type GetSpellScrollRow struct {
	ID           int64
	SpellID      int64
	SpellName    string
	CastingLevel int64
	Cost         float64
	Weight       int64
	Description  sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetSpellScroll(ctx context.Context, id int64) (GetSpellScrollRow, error) {
	row := q.queryRow(ctx, q.getSpellScrollStmt, getSpellScroll, id)
	var i GetSpellScrollRow
	err := row.Scan(
		&i.ID,
		&i.SpellID,
		&i.SpellName,
		&i.CastingLevel,
		&i.Cost,
		&i.Weight,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpellScrollsBySpell = `-- name: GetSpellScrollsBySpell :many
SELECT 
    ss.id, 
    ss.spell_id, 
    s.name as spell_name,
    ss.casting_level, 
    ss.cost, 
    ss.weight, 
    ss.description, 
    ss.created_at, 
    ss.updated_at
FROM spell_scrolls ss
JOIN spells s ON ss.spell_id = s.id
WHERE ss.spell_id = ?
ORDER BY ss.casting_level
`

type GetSpellScrollsBySpellRow struct {
	ID           int64
	SpellID      int64
	SpellName    string
	CastingLevel int64
	Cost         float64
	Weight       int64
	Description  sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetSpellScrollsBySpell(ctx context.Context, spellID int64) ([]GetSpellScrollsBySpellRow, error) {
	rows, err := q.query(ctx, q.getSpellScrollsBySpellStmt, getSpellScrollsBySpell, spellID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSpellScrollsBySpellRow{}
	for rows.Next() {
		var i GetSpellScrollsBySpellRow
		if err := rows.Scan(
			&i.ID,
			&i.SpellID,
			&i.SpellName,
			&i.CastingLevel,
			&i.Cost,
			&i.Weight,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpellScrolls = `-- name: ListSpellScrolls :many
SELECT 
    ss.id, 
    ss.spell_id, 
    s.name as spell_name,
    ss.casting_level, 
    ss.cost, 
    ss.weight, 
    ss.description, 
    ss.created_at, 
    ss.updated_at
FROM spell_scrolls ss
JOIN spells s ON ss.spell_id = s.id
ORDER BY s.name
`

type ListSpellScrollsRow struct {
	ID           int64
	SpellID      int64
	SpellName    string
	CastingLevel int64
	Cost         float64
	Weight       int64
	Description  sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) ListSpellScrolls(ctx context.Context) ([]ListSpellScrollsRow, error) {
	rows, err := q.query(ctx, q.listSpellScrollsStmt, listSpellScrolls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSpellScrollsRow{}
	for rows.Next() {
		var i ListSpellScrollsRow
		if err := rows.Scan(
			&i.ID,
			&i.SpellID,
			&i.SpellName,
			&i.CastingLevel,
			&i.Cost,
			&i.Weight,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpellScroll = `-- name: UpdateSpellScroll :execresult
UPDATE spell_scrolls
SET spell_id = ?,
    casting_level = ?,
    cost = ?,
    weight = ?,
    description = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateSpellScrollParams struct {
	SpellID      int64
	CastingLevel int64
	Cost         float64
	Weight       int64
	Description  sql.NullString
	ID           int64
}

func (q *Queries) UpdateSpellScroll(ctx context.Context, arg UpdateSpellScrollParams) (sql.Result, error) {
	return q.exec(ctx, q.updateSpellScrollStmt, updateSpellScroll,
		arg.SpellID,
		arg.CastingLevel,
		arg.Cost,
		arg.Weight,
		arg.Description,
		arg.ID,
	)
}
