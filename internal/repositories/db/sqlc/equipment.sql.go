// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: equipment.sql

package db

import (
	"context"
	"database/sql"
)

const createEquipment = `-- name: CreateEquipment :execresult
INSERT INTO equipment (
  name, description, cost, weight
) VALUES (
  ?, ?, ?, ?
)
`

type CreateEquipmentParams struct {
	Name        string
	Description string
	Cost        float64
	Weight      int64
}

func (q *Queries) CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentStmt, createEquipment,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Weight,
	)
}

const deleteEquipment = `-- name: DeleteEquipment :execresult
DELETE FROM equipment
WHERE id = ?
`

func (q *Queries) DeleteEquipment(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteEquipmentStmt, deleteEquipment, id)
}

const getEquipment = `-- name: GetEquipment :one
SELECT id, name, description, cost, weight, created_at, updated_at FROM equipment
WHERE id = ? LIMIT 1
`

func (q *Queries) GetEquipment(ctx context.Context, id int64) (Equipment, error) {
	row := q.queryRow(ctx, q.getEquipmentStmt, getEquipment, id)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEquipmentByName = `-- name: GetEquipmentByName :one
SELECT id, name, description, cost, weight, created_at, updated_at FROM equipment
WHERE name = ? LIMIT 1
`

func (q *Queries) GetEquipmentByName(ctx context.Context, name string) (Equipment, error) {
	row := q.queryRow(ctx, q.getEquipmentByNameStmt, getEquipmentByName, name)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEquipment = `-- name: ListEquipment :many
SELECT id, name, description, cost, weight, created_at, updated_at FROM equipment
ORDER BY name
`

func (q *Queries) ListEquipment(ctx context.Context) ([]Equipment, error) {
	rows, err := q.query(ctx, q.listEquipmentStmt, listEquipment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Equipment{}
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Cost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEquipment = `-- name: UpdateEquipment :execresult
UPDATE equipment
SET name = ?,
    description = ?,
    cost = ?,
    weight = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateEquipmentParams struct {
	Name        string
	Description string
	Cost        float64
	Weight      int64
	ID          int64
}

func (q *Queries) UpdateEquipment(ctx context.Context, arg UpdateEquipmentParams) (sql.Result, error) {
	return q.exec(ctx, q.updateEquipmentStmt, updateEquipment,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Weight,
		arg.ID,
	)
}
