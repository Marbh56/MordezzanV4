// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: prepared_spells.sql

package db

import (
	"context"
	"database/sql"
)

const clearPreparedSpells = `-- name: ClearPreparedSpells :exec
DELETE FROM prepared_spells
WHERE character_id = ?
`

func (q *Queries) ClearPreparedSpells(ctx context.Context, characterID int64) error {
	_, err := q.exec(ctx, q.clearPreparedSpellsStmt, clearPreparedSpells, characterID)
	return err
}

const countPreparedSpell = `-- name: CountPreparedSpell :one
SELECT COUNT(*) FROM prepared_spells
WHERE character_id = ? AND spell_id = ?
`

type CountPreparedSpellParams struct {
	CharacterID int64
	SpellID     int64
}

func (q *Queries) CountPreparedSpell(ctx context.Context, arg CountPreparedSpellParams) (int64, error) {
	row := q.queryRow(ctx, q.countPreparedSpellStmt, countPreparedSpell, arg.CharacterID, arg.SpellID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPreparedSpellsByLevel = `-- name: CountPreparedSpellsByLevel :one
SELECT COUNT(*) FROM prepared_spells
WHERE character_id = ? AND slot_level = ?
`

type CountPreparedSpellsByLevelParams struct {
	CharacterID int64
	SlotLevel   int64
}

func (q *Queries) CountPreparedSpellsByLevel(ctx context.Context, arg CountPreparedSpellsByLevelParams) (int64, error) {
	row := q.queryRow(ctx, q.countPreparedSpellsByLevelStmt, countPreparedSpellsByLevel, arg.CharacterID, arg.SlotLevel)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPreparedSpell = `-- name: GetPreparedSpell :one
SELECT id, character_id, spell_id, slot_level, prepared_at FROM prepared_spells
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPreparedSpell(ctx context.Context, id int64) (PreparedSpell, error) {
	row := q.queryRow(ctx, q.getPreparedSpellStmt, getPreparedSpell, id)
	var i PreparedSpell
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.SpellID,
		&i.SlotLevel,
		&i.PreparedAt,
	)
	return i, err
}

const getPreparedSpellsByCharacter = `-- name: GetPreparedSpellsByCharacter :many
SELECT id, character_id, spell_id, slot_level, prepared_at FROM prepared_spells
WHERE character_id = ?
ORDER BY slot_level, prepared_at
`

func (q *Queries) GetPreparedSpellsByCharacter(ctx context.Context, characterID int64) ([]PreparedSpell, error) {
	rows, err := q.query(ctx, q.getPreparedSpellsByCharacterStmt, getPreparedSpellsByCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PreparedSpell{}
	for rows.Next() {
		var i PreparedSpell
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.SpellID,
			&i.SlotLevel,
			&i.PreparedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const prepareSpell = `-- name: PrepareSpell :execresult
INSERT INTO prepared_spells (
    character_id, spell_id, slot_level
) VALUES (
    ?, ?, ?
)
`

type PrepareSpellParams struct {
	CharacterID int64
	SpellID     int64
	SlotLevel   int64
}

func (q *Queries) PrepareSpell(ctx context.Context, arg PrepareSpellParams) (sql.Result, error) {
	return q.exec(ctx, q.prepareSpellStmt, prepareSpell, arg.CharacterID, arg.SpellID, arg.SlotLevel)
}

const unprepareSpell = `-- name: UnprepareSpell :exec
DELETE FROM prepared_spells
WHERE character_id = ? AND spell_id = ?
`

type UnprepareSpellParams struct {
	CharacterID int64
	SpellID     int64
}

func (q *Queries) UnprepareSpell(ctx context.Context, arg UnprepareSpellParams) error {
	_, err := q.exec(ctx, q.unprepareSpellStmt, unprepareSpell, arg.CharacterID, arg.SpellID)
	return err
}
