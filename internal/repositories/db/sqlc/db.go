// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createArmorStmt, err = db.PrepareContext(ctx, createArmor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArmor: %w", err)
	}
	if q.createCharacterStmt, err = db.PrepareContext(ctx, createCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCharacter: %w", err)
	}
	if q.createEquipmentStmt, err = db.PrepareContext(ctx, createEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipment: %w", err)
	}
	if q.createMagicItemStmt, err = db.PrepareContext(ctx, createMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMagicItem: %w", err)
	}
	if q.createPotionStmt, err = db.PrepareContext(ctx, createPotion); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePotion: %w", err)
	}
	if q.createShieldStmt, err = db.PrepareContext(ctx, createShield); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShield: %w", err)
	}
	if q.createSpellStmt, err = db.PrepareContext(ctx, createSpell); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSpell: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWeaponStmt, err = db.PrepareContext(ctx, createWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWeapon: %w", err)
	}
	if q.deleteArmorStmt, err = db.PrepareContext(ctx, deleteArmor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArmor: %w", err)
	}
	if q.deleteCharacterStmt, err = db.PrepareContext(ctx, deleteCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCharacter: %w", err)
	}
	if q.deleteEquipmentStmt, err = db.PrepareContext(ctx, deleteEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipment: %w", err)
	}
	if q.deleteMagicItemStmt, err = db.PrepareContext(ctx, deleteMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMagicItem: %w", err)
	}
	if q.deletePotionStmt, err = db.PrepareContext(ctx, deletePotion); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePotion: %w", err)
	}
	if q.deleteShieldStmt, err = db.PrepareContext(ctx, deleteShield); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteShield: %w", err)
	}
	if q.deleteSpellStmt, err = db.PrepareContext(ctx, deleteSpell); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSpell: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWeaponStmt, err = db.PrepareContext(ctx, deleteWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWeapon: %w", err)
	}
	if q.getArmorStmt, err = db.PrepareContext(ctx, getArmor); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmor: %w", err)
	}
	if q.getArmorByNameStmt, err = db.PrepareContext(ctx, getArmorByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmorByName: %w", err)
	}
	if q.getCharacterStmt, err = db.PrepareContext(ctx, getCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharacter: %w", err)
	}
	if q.getCharactersByUserStmt, err = db.PrepareContext(ctx, getCharactersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharactersByUser: %w", err)
	}
	if q.getEquipmentStmt, err = db.PrepareContext(ctx, getEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipment: %w", err)
	}
	if q.getEquipmentByNameStmt, err = db.PrepareContext(ctx, getEquipmentByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentByName: %w", err)
	}
	if q.getMagicItemStmt, err = db.PrepareContext(ctx, getMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItem: %w", err)
	}
	if q.getMagicItemByNameStmt, err = db.PrepareContext(ctx, getMagicItemByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItemByName: %w", err)
	}
	if q.getPotionStmt, err = db.PrepareContext(ctx, getPotion); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotion: %w", err)
	}
	if q.getPotionByNameStmt, err = db.PrepareContext(ctx, getPotionByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotionByName: %w", err)
	}
	if q.getShieldStmt, err = db.PrepareContext(ctx, getShield); err != nil {
		return nil, fmt.Errorf("error preparing query GetShield: %w", err)
	}
	if q.getShieldByNameStmt, err = db.PrepareContext(ctx, getShieldByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetShieldByName: %w", err)
	}
	if q.getSpellStmt, err = db.PrepareContext(ctx, getSpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpell: %w", err)
	}
	if q.getSpellsByCharacterStmt, err = db.PrepareContext(ctx, getSpellsByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellsByCharacter: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWeaponStmt, err = db.PrepareContext(ctx, getWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeapon: %w", err)
	}
	if q.getWeaponByNameStmt, err = db.PrepareContext(ctx, getWeaponByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponByName: %w", err)
	}
	if q.listArmorsStmt, err = db.PrepareContext(ctx, listArmors); err != nil {
		return nil, fmt.Errorf("error preparing query ListArmors: %w", err)
	}
	if q.listCharactersStmt, err = db.PrepareContext(ctx, listCharacters); err != nil {
		return nil, fmt.Errorf("error preparing query ListCharacters: %w", err)
	}
	if q.listEquipmentStmt, err = db.PrepareContext(ctx, listEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipment: %w", err)
	}
	if q.listMagicItemsStmt, err = db.PrepareContext(ctx, listMagicItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItems: %w", err)
	}
	if q.listMagicItemsByTypeStmt, err = db.PrepareContext(ctx, listMagicItemsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItemsByType: %w", err)
	}
	if q.listPotionsStmt, err = db.PrepareContext(ctx, listPotions); err != nil {
		return nil, fmt.Errorf("error preparing query ListPotions: %w", err)
	}
	if q.listShieldsStmt, err = db.PrepareContext(ctx, listShields); err != nil {
		return nil, fmt.Errorf("error preparing query ListShields: %w", err)
	}
	if q.listSpellsStmt, err = db.PrepareContext(ctx, listSpells); err != nil {
		return nil, fmt.Errorf("error preparing query ListSpells: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listWeaponsStmt, err = db.PrepareContext(ctx, listWeapons); err != nil {
		return nil, fmt.Errorf("error preparing query ListWeapons: %w", err)
	}
	if q.updateArmorStmt, err = db.PrepareContext(ctx, updateArmor); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArmor: %w", err)
	}
	if q.updateCharacterStmt, err = db.PrepareContext(ctx, updateCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacter: %w", err)
	}
	if q.updateEquipmentStmt, err = db.PrepareContext(ctx, updateEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipment: %w", err)
	}
	if q.updateMagicItemStmt, err = db.PrepareContext(ctx, updateMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMagicItem: %w", err)
	}
	if q.updatePotionStmt, err = db.PrepareContext(ctx, updatePotion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePotion: %w", err)
	}
	if q.updateShieldStmt, err = db.PrepareContext(ctx, updateShield); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShield: %w", err)
	}
	if q.updateSpellStmt, err = db.PrepareContext(ctx, updateSpell); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSpell: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateWeaponStmt, err = db.PrepareContext(ctx, updateWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWeapon: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createArmorStmt != nil {
		if cerr := q.createArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArmorStmt: %w", cerr)
		}
	}
	if q.createCharacterStmt != nil {
		if cerr := q.createCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCharacterStmt: %w", cerr)
		}
	}
	if q.createEquipmentStmt != nil {
		if cerr := q.createEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentStmt: %w", cerr)
		}
	}
	if q.createMagicItemStmt != nil {
		if cerr := q.createMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMagicItemStmt: %w", cerr)
		}
	}
	if q.createPotionStmt != nil {
		if cerr := q.createPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPotionStmt: %w", cerr)
		}
	}
	if q.createShieldStmt != nil {
		if cerr := q.createShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShieldStmt: %w", cerr)
		}
	}
	if q.createSpellStmt != nil {
		if cerr := q.createSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSpellStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWeaponStmt != nil {
		if cerr := q.createWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWeaponStmt: %w", cerr)
		}
	}
	if q.deleteArmorStmt != nil {
		if cerr := q.deleteArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArmorStmt: %w", cerr)
		}
	}
	if q.deleteCharacterStmt != nil {
		if cerr := q.deleteCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCharacterStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentStmt != nil {
		if cerr := q.deleteEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentStmt: %w", cerr)
		}
	}
	if q.deleteMagicItemStmt != nil {
		if cerr := q.deleteMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMagicItemStmt: %w", cerr)
		}
	}
	if q.deletePotionStmt != nil {
		if cerr := q.deletePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePotionStmt: %w", cerr)
		}
	}
	if q.deleteShieldStmt != nil {
		if cerr := q.deleteShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteShieldStmt: %w", cerr)
		}
	}
	if q.deleteSpellStmt != nil {
		if cerr := q.deleteSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSpellStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWeaponStmt != nil {
		if cerr := q.deleteWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWeaponStmt: %w", cerr)
		}
	}
	if q.getArmorStmt != nil {
		if cerr := q.getArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorStmt: %w", cerr)
		}
	}
	if q.getArmorByNameStmt != nil {
		if cerr := q.getArmorByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorByNameStmt: %w", cerr)
		}
	}
	if q.getCharacterStmt != nil {
		if cerr := q.getCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharacterStmt: %w", cerr)
		}
	}
	if q.getCharactersByUserStmt != nil {
		if cerr := q.getCharactersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharactersByUserStmt: %w", cerr)
		}
	}
	if q.getEquipmentStmt != nil {
		if cerr := q.getEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentStmt: %w", cerr)
		}
	}
	if q.getEquipmentByNameStmt != nil {
		if cerr := q.getEquipmentByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentByNameStmt: %w", cerr)
		}
	}
	if q.getMagicItemStmt != nil {
		if cerr := q.getMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemStmt: %w", cerr)
		}
	}
	if q.getMagicItemByNameStmt != nil {
		if cerr := q.getMagicItemByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemByNameStmt: %w", cerr)
		}
	}
	if q.getPotionStmt != nil {
		if cerr := q.getPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionStmt: %w", cerr)
		}
	}
	if q.getPotionByNameStmt != nil {
		if cerr := q.getPotionByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionByNameStmt: %w", cerr)
		}
	}
	if q.getShieldStmt != nil {
		if cerr := q.getShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldStmt: %w", cerr)
		}
	}
	if q.getShieldByNameStmt != nil {
		if cerr := q.getShieldByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldByNameStmt: %w", cerr)
		}
	}
	if q.getSpellStmt != nil {
		if cerr := q.getSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellStmt: %w", cerr)
		}
	}
	if q.getSpellsByCharacterStmt != nil {
		if cerr := q.getSpellsByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellsByCharacterStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWeaponStmt != nil {
		if cerr := q.getWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponStmt: %w", cerr)
		}
	}
	if q.getWeaponByNameStmt != nil {
		if cerr := q.getWeaponByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponByNameStmt: %w", cerr)
		}
	}
	if q.listArmorsStmt != nil {
		if cerr := q.listArmorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listArmorsStmt: %w", cerr)
		}
	}
	if q.listCharactersStmt != nil {
		if cerr := q.listCharactersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCharactersStmt: %w", cerr)
		}
	}
	if q.listEquipmentStmt != nil {
		if cerr := q.listEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentStmt: %w", cerr)
		}
	}
	if q.listMagicItemsStmt != nil {
		if cerr := q.listMagicItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsStmt: %w", cerr)
		}
	}
	if q.listMagicItemsByTypeStmt != nil {
		if cerr := q.listMagicItemsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsByTypeStmt: %w", cerr)
		}
	}
	if q.listPotionsStmt != nil {
		if cerr := q.listPotionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPotionsStmt: %w", cerr)
		}
	}
	if q.listShieldsStmt != nil {
		if cerr := q.listShieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listShieldsStmt: %w", cerr)
		}
	}
	if q.listSpellsStmt != nil {
		if cerr := q.listSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSpellsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listWeaponsStmt != nil {
		if cerr := q.listWeaponsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWeaponsStmt: %w", cerr)
		}
	}
	if q.updateArmorStmt != nil {
		if cerr := q.updateArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArmorStmt: %w", cerr)
		}
	}
	if q.updateCharacterStmt != nil {
		if cerr := q.updateCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterStmt: %w", cerr)
		}
	}
	if q.updateEquipmentStmt != nil {
		if cerr := q.updateEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentStmt: %w", cerr)
		}
	}
	if q.updateMagicItemStmt != nil {
		if cerr := q.updateMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMagicItemStmt: %w", cerr)
		}
	}
	if q.updatePotionStmt != nil {
		if cerr := q.updatePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePotionStmt: %w", cerr)
		}
	}
	if q.updateShieldStmt != nil {
		if cerr := q.updateShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShieldStmt: %w", cerr)
		}
	}
	if q.updateSpellStmt != nil {
		if cerr := q.updateSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSpellStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateWeaponStmt != nil {
		if cerr := q.updateWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWeaponStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createArmorStmt          *sql.Stmt
	createCharacterStmt      *sql.Stmt
	createEquipmentStmt      *sql.Stmt
	createMagicItemStmt      *sql.Stmt
	createPotionStmt         *sql.Stmt
	createShieldStmt         *sql.Stmt
	createSpellStmt          *sql.Stmt
	createUserStmt           *sql.Stmt
	createWeaponStmt         *sql.Stmt
	deleteArmorStmt          *sql.Stmt
	deleteCharacterStmt      *sql.Stmt
	deleteEquipmentStmt      *sql.Stmt
	deleteMagicItemStmt      *sql.Stmt
	deletePotionStmt         *sql.Stmt
	deleteShieldStmt         *sql.Stmt
	deleteSpellStmt          *sql.Stmt
	deleteUserStmt           *sql.Stmt
	deleteWeaponStmt         *sql.Stmt
	getArmorStmt             *sql.Stmt
	getArmorByNameStmt       *sql.Stmt
	getCharacterStmt         *sql.Stmt
	getCharactersByUserStmt  *sql.Stmt
	getEquipmentStmt         *sql.Stmt
	getEquipmentByNameStmt   *sql.Stmt
	getMagicItemStmt         *sql.Stmt
	getMagicItemByNameStmt   *sql.Stmt
	getPotionStmt            *sql.Stmt
	getPotionByNameStmt      *sql.Stmt
	getShieldStmt            *sql.Stmt
	getShieldByNameStmt      *sql.Stmt
	getSpellStmt             *sql.Stmt
	getSpellsByCharacterStmt *sql.Stmt
	getUserStmt              *sql.Stmt
	getWeaponStmt            *sql.Stmt
	getWeaponByNameStmt      *sql.Stmt
	listArmorsStmt           *sql.Stmt
	listCharactersStmt       *sql.Stmt
	listEquipmentStmt        *sql.Stmt
	listMagicItemsStmt       *sql.Stmt
	listMagicItemsByTypeStmt *sql.Stmt
	listPotionsStmt          *sql.Stmt
	listShieldsStmt          *sql.Stmt
	listSpellsStmt           *sql.Stmt
	listUsersStmt            *sql.Stmt
	listWeaponsStmt          *sql.Stmt
	updateArmorStmt          *sql.Stmt
	updateCharacterStmt      *sql.Stmt
	updateEquipmentStmt      *sql.Stmt
	updateMagicItemStmt      *sql.Stmt
	updatePotionStmt         *sql.Stmt
	updateShieldStmt         *sql.Stmt
	updateSpellStmt          *sql.Stmt
	updateUserStmt           *sql.Stmt
	updateWeaponStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createArmorStmt:          q.createArmorStmt,
		createCharacterStmt:      q.createCharacterStmt,
		createEquipmentStmt:      q.createEquipmentStmt,
		createMagicItemStmt:      q.createMagicItemStmt,
		createPotionStmt:         q.createPotionStmt,
		createShieldStmt:         q.createShieldStmt,
		createSpellStmt:          q.createSpellStmt,
		createUserStmt:           q.createUserStmt,
		createWeaponStmt:         q.createWeaponStmt,
		deleteArmorStmt:          q.deleteArmorStmt,
		deleteCharacterStmt:      q.deleteCharacterStmt,
		deleteEquipmentStmt:      q.deleteEquipmentStmt,
		deleteMagicItemStmt:      q.deleteMagicItemStmt,
		deletePotionStmt:         q.deletePotionStmt,
		deleteShieldStmt:         q.deleteShieldStmt,
		deleteSpellStmt:          q.deleteSpellStmt,
		deleteUserStmt:           q.deleteUserStmt,
		deleteWeaponStmt:         q.deleteWeaponStmt,
		getArmorStmt:             q.getArmorStmt,
		getArmorByNameStmt:       q.getArmorByNameStmt,
		getCharacterStmt:         q.getCharacterStmt,
		getCharactersByUserStmt:  q.getCharactersByUserStmt,
		getEquipmentStmt:         q.getEquipmentStmt,
		getEquipmentByNameStmt:   q.getEquipmentByNameStmt,
		getMagicItemStmt:         q.getMagicItemStmt,
		getMagicItemByNameStmt:   q.getMagicItemByNameStmt,
		getPotionStmt:            q.getPotionStmt,
		getPotionByNameStmt:      q.getPotionByNameStmt,
		getShieldStmt:            q.getShieldStmt,
		getShieldByNameStmt:      q.getShieldByNameStmt,
		getSpellStmt:             q.getSpellStmt,
		getSpellsByCharacterStmt: q.getSpellsByCharacterStmt,
		getUserStmt:              q.getUserStmt,
		getWeaponStmt:            q.getWeaponStmt,
		getWeaponByNameStmt:      q.getWeaponByNameStmt,
		listArmorsStmt:           q.listArmorsStmt,
		listCharactersStmt:       q.listCharactersStmt,
		listEquipmentStmt:        q.listEquipmentStmt,
		listMagicItemsStmt:       q.listMagicItemsStmt,
		listMagicItemsByTypeStmt: q.listMagicItemsByTypeStmt,
		listPotionsStmt:          q.listPotionsStmt,
		listShieldsStmt:          q.listShieldsStmt,
		listSpellsStmt:           q.listSpellsStmt,
		listUsersStmt:            q.listUsersStmt,
		listWeaponsStmt:          q.listWeaponsStmt,
		updateArmorStmt:          q.updateArmorStmt,
		updateCharacterStmt:      q.updateCharacterStmt,
		updateEquipmentStmt:      q.updateEquipmentStmt,
		updateMagicItemStmt:      q.updateMagicItemStmt,
		updatePotionStmt:         q.updatePotionStmt,
		updateShieldStmt:         q.updateShieldStmt,
		updateSpellStmt:          q.updateSpellStmt,
		updateUserStmt:           q.updateUserStmt,
		updateWeaponStmt:         q.updateWeaponStmt,
	}
}
