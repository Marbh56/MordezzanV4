// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addInventoryItemStmt, err = db.PrepareContext(ctx, addInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query AddInventoryItem: %w", err)
	}
	if q.addKnownSpellStmt, err = db.PrepareContext(ctx, addKnownSpell); err != nil {
		return nil, fmt.Errorf("error preparing query AddKnownSpell: %w", err)
	}
	if q.addWeaponMasteryStmt, err = db.PrepareContext(ctx, addWeaponMastery); err != nil {
		return nil, fmt.Errorf("error preparing query AddWeaponMastery: %w", err)
	}
	if q.clearPreparedSpellsStmt, err = db.PrepareContext(ctx, clearPreparedSpells); err != nil {
		return nil, fmt.Errorf("error preparing query ClearPreparedSpells: %w", err)
	}
	if q.countPreparedSpellsByLevelAndClassStmt, err = db.PrepareContext(ctx, countPreparedSpellsByLevelAndClass); err != nil {
		return nil, fmt.Errorf("error preparing query CountPreparedSpellsByLevelAndClass: %w", err)
	}
	if q.countWeaponMasteriesStmt, err = db.PrepareContext(ctx, countWeaponMasteries); err != nil {
		return nil, fmt.Errorf("error preparing query CountWeaponMasteries: %w", err)
	}
	if q.createAmmoStmt, err = db.PrepareContext(ctx, createAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAmmo: %w", err)
	}
	if q.createArmorStmt, err = db.PrepareContext(ctx, createArmor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArmor: %w", err)
	}
	if q.createCharacterStmt, err = db.PrepareContext(ctx, createCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCharacter: %w", err)
	}
	if q.createContainerStmt, err = db.PrepareContext(ctx, createContainer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateContainer: %w", err)
	}
	if q.createEquipmentStmt, err = db.PrepareContext(ctx, createEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipment: %w", err)
	}
	if q.createInventoryStmt, err = db.PrepareContext(ctx, createInventory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInventory: %w", err)
	}
	if q.createMagicItemStmt, err = db.PrepareContext(ctx, createMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMagicItem: %w", err)
	}
	if q.createPotionStmt, err = db.PrepareContext(ctx, createPotion); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePotion: %w", err)
	}
	if q.createRingStmt, err = db.PrepareContext(ctx, createRing); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRing: %w", err)
	}
	if q.createShieldStmt, err = db.PrepareContext(ctx, createShield); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShield: %w", err)
	}
	if q.createSpellStmt, err = db.PrepareContext(ctx, createSpell); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSpell: %w", err)
	}
	if q.createSpellScrollStmt, err = db.PrepareContext(ctx, createSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSpellScroll: %w", err)
	}
	if q.createTreasureStmt, err = db.PrepareContext(ctx, createTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTreasure: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWeaponStmt, err = db.PrepareContext(ctx, createWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWeapon: %w", err)
	}
	if q.deleteAmmoStmt, err = db.PrepareContext(ctx, deleteAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAmmo: %w", err)
	}
	if q.deleteArmorStmt, err = db.PrepareContext(ctx, deleteArmor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArmor: %w", err)
	}
	if q.deleteCharacterStmt, err = db.PrepareContext(ctx, deleteCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCharacter: %w", err)
	}
	if q.deleteContainerStmt, err = db.PrepareContext(ctx, deleteContainer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteContainer: %w", err)
	}
	if q.deleteEquipmentStmt, err = db.PrepareContext(ctx, deleteEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipment: %w", err)
	}
	if q.deleteInventoryStmt, err = db.PrepareContext(ctx, deleteInventory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteInventory: %w", err)
	}
	if q.deleteMagicItemStmt, err = db.PrepareContext(ctx, deleteMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMagicItem: %w", err)
	}
	if q.deletePotionStmt, err = db.PrepareContext(ctx, deletePotion); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePotion: %w", err)
	}
	if q.deleteRingStmt, err = db.PrepareContext(ctx, deleteRing); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRing: %w", err)
	}
	if q.deleteShieldStmt, err = db.PrepareContext(ctx, deleteShield); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteShield: %w", err)
	}
	if q.deleteSpellStmt, err = db.PrepareContext(ctx, deleteSpell); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSpell: %w", err)
	}
	if q.deleteSpellScrollStmt, err = db.PrepareContext(ctx, deleteSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSpellScroll: %w", err)
	}
	if q.deleteTreasureStmt, err = db.PrepareContext(ctx, deleteTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTreasure: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWeaponStmt, err = db.PrepareContext(ctx, deleteWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWeapon: %w", err)
	}
	if q.deleteWeaponMasteryStmt, err = db.PrepareContext(ctx, deleteWeaponMastery); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWeaponMastery: %w", err)
	}
	if q.getAllClassDataStmt, err = db.PrepareContext(ctx, getAllClassData); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllClassData: %w", err)
	}
	if q.getAmmoStmt, err = db.PrepareContext(ctx, getAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query GetAmmo: %w", err)
	}
	if q.getAmmoByNameStmt, err = db.PrepareContext(ctx, getAmmoByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAmmoByName: %w", err)
	}
	if q.getArmorStmt, err = db.PrepareContext(ctx, getArmor); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmor: %w", err)
	}
	if q.getArmorByNameStmt, err = db.PrepareContext(ctx, getArmorByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmorByName: %w", err)
	}
	if q.getBarbarianAbilitiesStmt, err = db.PrepareContext(ctx, getBarbarianAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetBarbarianAbilities: %w", err)
	}
	if q.getBardAbilitiesStmt, err = db.PrepareContext(ctx, getBardAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetBardAbilities: %w", err)
	}
	if q.getBardDruidSpellsStmt, err = db.PrepareContext(ctx, getBardDruidSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetBardDruidSpells: %w", err)
	}
	if q.getBardIllusionistSpellsStmt, err = db.PrepareContext(ctx, getBardIllusionistSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetBardIllusionistSpells: %w", err)
	}
	if q.getBerserkerAbilitiesStmt, err = db.PrepareContext(ctx, getBerserkerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetBerserkerAbilities: %w", err)
	}
	if q.getBerserkerNaturalACStmt, err = db.PrepareContext(ctx, getBerserkerNaturalAC); err != nil {
		return nil, fmt.Errorf("error preparing query GetBerserkerNaturalAC: %w", err)
	}
	if q.getCataphractAbilitiesStmt, err = db.PrepareContext(ctx, getCataphractAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetCataphractAbilities: %w", err)
	}
	if q.getCharacterStmt, err = db.PrepareContext(ctx, getCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharacter: %w", err)
	}
	if q.getCharacterForSpellcastingStmt, err = db.PrepareContext(ctx, getCharacterForSpellcasting); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharacterForSpellcasting: %w", err)
	}
	if q.getCharactersByUserStmt, err = db.PrepareContext(ctx, getCharactersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharactersByUser: %w", err)
	}
	if q.getClassAbilitiesStmt, err = db.PrepareContext(ctx, getClassAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassAbilities: %w", err)
	}
	if q.getClassAbilitiesByLevelStmt, err = db.PrepareContext(ctx, getClassAbilitiesByLevel); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassAbilitiesByLevel: %w", err)
	}
	if q.getClassDataStmt, err = db.PrepareContext(ctx, getClassData); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassData: %w", err)
	}
	if q.getClassDataForSpellcastingStmt, err = db.PrepareContext(ctx, getClassDataForSpellcasting); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassDataForSpellcasting: %w", err)
	}
	if q.getClericAbilitiesStmt, err = db.PrepareContext(ctx, getClericAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetClericAbilities: %w", err)
	}
	if q.getClericTurningAbilityStmt, err = db.PrepareContext(ctx, getClericTurningAbility); err != nil {
		return nil, fmt.Errorf("error preparing query GetClericTurningAbility: %w", err)
	}
	if q.getContainerStmt, err = db.PrepareContext(ctx, getContainer); err != nil {
		return nil, fmt.Errorf("error preparing query GetContainer: %w", err)
	}
	if q.getContainerByNameStmt, err = db.PrepareContext(ctx, getContainerByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetContainerByName: %w", err)
	}
	if q.getCryomancerAbilitiesStmt, err = db.PrepareContext(ctx, getCryomancerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetCryomancerAbilities: %w", err)
	}
	if q.getDruidAbilitiesStmt, err = db.PrepareContext(ctx, getDruidAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetDruidAbilities: %w", err)
	}
	if q.getEquipmentStmt, err = db.PrepareContext(ctx, getEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipment: %w", err)
	}
	if q.getEquipmentByNameStmt, err = db.PrepareContext(ctx, getEquipmentByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentByName: %w", err)
	}
	if q.getEquippedItemsStmt, err = db.PrepareContext(ctx, getEquippedItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquippedItems: %w", err)
	}
	if q.getFighterAbilitiesStmt, err = db.PrepareContext(ctx, getFighterAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetFighterAbilities: %w", err)
	}
	if q.getFullUserByEmailStmt, err = db.PrepareContext(ctx, getFullUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetFullUserByEmail: %w", err)
	}
	if q.getHuntsmanAbilitiesStmt, err = db.PrepareContext(ctx, getHuntsmanAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetHuntsmanAbilities: %w", err)
	}
	if q.getIllusionistAbilitiesStmt, err = db.PrepareContext(ctx, getIllusionistAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetIllusionistAbilities: %w", err)
	}
	if q.getInventoryStmt, err = db.PrepareContext(ctx, getInventory); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventory: %w", err)
	}
	if q.getInventoryByCharacterStmt, err = db.PrepareContext(ctx, getInventoryByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryByCharacter: %w", err)
	}
	if q.getInventoryItemStmt, err = db.PrepareContext(ctx, getInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItem: %w", err)
	}
	if q.getInventoryItemByTypeAndItemIDStmt, err = db.PrepareContext(ctx, getInventoryItemByTypeAndItemID); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItemByTypeAndItemID: %w", err)
	}
	if q.getInventoryItemsStmt, err = db.PrepareContext(ctx, getInventoryItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItems: %w", err)
	}
	if q.getInventoryItemsByTypeStmt, err = db.PrepareContext(ctx, getInventoryItemsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItemsByType: %w", err)
	}
	if q.getItemsBySlotStmt, err = db.PrepareContext(ctx, getItemsBySlot); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsBySlot: %w", err)
	}
	if q.getKnownSpellByCharacterAndSpellStmt, err = db.PrepareContext(ctx, getKnownSpellByCharacterAndSpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetKnownSpellByCharacterAndSpell: %w", err)
	}
	if q.getKnownSpellsStmt, err = db.PrepareContext(ctx, getKnownSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetKnownSpells: %w", err)
	}
	if q.getKnownSpellsByClassStmt, err = db.PrepareContext(ctx, getKnownSpellsByClass); err != nil {
		return nil, fmt.Errorf("error preparing query GetKnownSpellsByClass: %w", err)
	}
	if q.getLegerdemainistAbilitiesStmt, err = db.PrepareContext(ctx, getLegerdemainistAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetLegerdemainistAbilities: %w", err)
	}
	if q.getMagicItemStmt, err = db.PrepareContext(ctx, getMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItem: %w", err)
	}
	if q.getMagicItemByNameStmt, err = db.PrepareContext(ctx, getMagicItemByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItemByName: %w", err)
	}
	if q.getMagicianAbilitiesStmt, err = db.PrepareContext(ctx, getMagicianAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicianAbilities: %w", err)
	}
	if q.getMonkACBonusStmt, err = db.PrepareContext(ctx, getMonkACBonus); err != nil {
		return nil, fmt.Errorf("error preparing query GetMonkACBonus: %w", err)
	}
	if q.getMonkAbilitiesStmt, err = db.PrepareContext(ctx, getMonkAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetMonkAbilities: %w", err)
	}
	if q.getMonkEmptyHandDamageStmt, err = db.PrepareContext(ctx, getMonkEmptyHandDamage); err != nil {
		return nil, fmt.Errorf("error preparing query GetMonkEmptyHandDamage: %w", err)
	}
	if q.getNecromancerAbilitiesStmt, err = db.PrepareContext(ctx, getNecromancerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetNecromancerAbilities: %w", err)
	}
	if q.getNecromancerTurningAbilityStmt, err = db.PrepareContext(ctx, getNecromancerTurningAbility); err != nil {
		return nil, fmt.Errorf("error preparing query GetNecromancerTurningAbility: %w", err)
	}
	if q.getNextAvailableSlotIndexStmt, err = db.PrepareContext(ctx, getNextAvailableSlotIndex); err != nil {
		return nil, fmt.Errorf("error preparing query GetNextAvailableSlotIndex: %w", err)
	}
	if q.getNextLevelDataStmt, err = db.PrepareContext(ctx, getNextLevelData); err != nil {
		return nil, fmt.Errorf("error preparing query GetNextLevelData: %w", err)
	}
	if q.getPaladinAbilitiesStmt, err = db.PrepareContext(ctx, getPaladinAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaladinAbilities: %w", err)
	}
	if q.getPaladinTurningAbilityStmt, err = db.PrepareContext(ctx, getPaladinTurningAbility); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaladinTurningAbility: %w", err)
	}
	if q.getPotionStmt, err = db.PrepareContext(ctx, getPotion); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotion: %w", err)
	}
	if q.getPotionByNameStmt, err = db.PrepareContext(ctx, getPotionByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotionByName: %w", err)
	}
	if q.getPreparedSpellByCharacterAndSpellStmt, err = db.PrepareContext(ctx, getPreparedSpellByCharacterAndSpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetPreparedSpellByCharacterAndSpell: %w", err)
	}
	if q.getPreparedSpellsStmt, err = db.PrepareContext(ctx, getPreparedSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetPreparedSpells: %w", err)
	}
	if q.getPreparedSpellsByClassStmt, err = db.PrepareContext(ctx, getPreparedSpellsByClass); err != nil {
		return nil, fmt.Errorf("error preparing query GetPreparedSpellsByClass: %w", err)
	}
	if q.getPriestAbilitiesStmt, err = db.PrepareContext(ctx, getPriestAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetPriestAbilities: %w", err)
	}
	if q.getPurloinerAbilitiesStmt, err = db.PrepareContext(ctx, getPurloinerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetPurloinerAbilities: %w", err)
	}
	if q.getPyromancerAbilitiesStmt, err = db.PrepareContext(ctx, getPyromancerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetPyromancerAbilities: %w", err)
	}
	if q.getRangerAbilitiesStmt, err = db.PrepareContext(ctx, getRangerAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetRangerAbilities: %w", err)
	}
	if q.getRangerDruidSpellSlotsStmt, err = db.PrepareContext(ctx, getRangerDruidSpellSlots); err != nil {
		return nil, fmt.Errorf("error preparing query GetRangerDruidSpellSlots: %w", err)
	}
	if q.getRangerMagicianSpellSlotsStmt, err = db.PrepareContext(ctx, getRangerMagicianSpellSlots); err != nil {
		return nil, fmt.Errorf("error preparing query GetRangerMagicianSpellSlots: %w", err)
	}
	if q.getRingStmt, err = db.PrepareContext(ctx, getRing); err != nil {
		return nil, fmt.Errorf("error preparing query GetRing: %w", err)
	}
	if q.getRingByNameStmt, err = db.PrepareContext(ctx, getRingByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetRingByName: %w", err)
	}
	if q.getRunegraverAbilitiesStmt, err = db.PrepareContext(ctx, getRunegraverAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetRunegraverAbilities: %w", err)
	}
	if q.getRunesPerDayStmt, err = db.PrepareContext(ctx, getRunesPerDay); err != nil {
		return nil, fmt.Errorf("error preparing query GetRunesPerDay: %w", err)
	}
	if q.getScoutAbilitiesStmt, err = db.PrepareContext(ctx, getScoutAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetScoutAbilities: %w", err)
	}
	if q.getShamanAbilitiesStmt, err = db.PrepareContext(ctx, getShamanAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetShamanAbilities: %w", err)
	}
	if q.getShamanArcaneSpellsStmt, err = db.PrepareContext(ctx, getShamanArcaneSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetShamanArcaneSpells: %w", err)
	}
	if q.getShamanDivineSpellsStmt, err = db.PrepareContext(ctx, getShamanDivineSpells); err != nil {
		return nil, fmt.Errorf("error preparing query GetShamanDivineSpells: %w", err)
	}
	if q.getShieldStmt, err = db.PrepareContext(ctx, getShield); err != nil {
		return nil, fmt.Errorf("error preparing query GetShield: %w", err)
	}
	if q.getShieldByNameStmt, err = db.PrepareContext(ctx, getShieldByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetShieldByName: %w", err)
	}
	if q.getSpellStmt, err = db.PrepareContext(ctx, getSpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpell: %w", err)
	}
	if q.getSpellForSpellcastingStmt, err = db.PrepareContext(ctx, getSpellForSpellcasting); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellForSpellcasting: %w", err)
	}
	if q.getSpellScrollStmt, err = db.PrepareContext(ctx, getSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellScroll: %w", err)
	}
	if q.getSpellScrollsBySpellStmt, err = db.PrepareContext(ctx, getSpellScrollsBySpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellScrollsBySpell: %w", err)
	}
	if q.getSpellsByClassLevelStmt, err = db.PrepareContext(ctx, getSpellsByClassLevel); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellsByClassLevel: %w", err)
	}
	if q.getThiefAbilitiesStmt, err = db.PrepareContext(ctx, getThiefAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetThiefAbilities: %w", err)
	}
	if q.getThiefSkillsByLevelStmt, err = db.PrepareContext(ctx, getThiefSkillsByLevel); err != nil {
		return nil, fmt.Errorf("error preparing query GetThiefSkillsByLevel: %w", err)
	}
	if q.getTreasureStmt, err = db.PrepareContext(ctx, getTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query GetTreasure: %w", err)
	}
	if q.getTreasureByCharacterStmt, err = db.PrepareContext(ctx, getTreasureByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetTreasureByCharacter: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWarlockAbilitiesStmt, err = db.PrepareContext(ctx, getWarlockAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetWarlockAbilities: %w", err)
	}
	if q.getWeaponStmt, err = db.PrepareContext(ctx, getWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeapon: %w", err)
	}
	if q.getWeaponByNameStmt, err = db.PrepareContext(ctx, getWeaponByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponByName: %w", err)
	}
	if q.getWeaponMasteriesByCharacterStmt, err = db.PrepareContext(ctx, getWeaponMasteriesByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponMasteriesByCharacter: %w", err)
	}
	if q.getWeaponMasteryByBaseNameStmt, err = db.PrepareContext(ctx, getWeaponMasteryByBaseName); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponMasteryByBaseName: %w", err)
	}
	if q.getWeaponMasteryByIDStmt, err = db.PrepareContext(ctx, getWeaponMasteryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponMasteryByID: %w", err)
	}
	if q.getWitchAbilitiesStmt, err = db.PrepareContext(ctx, getWitchAbilities); err != nil {
		return nil, fmt.Errorf("error preparing query GetWitchAbilities: %w", err)
	}
	if q.listAmmoStmt, err = db.PrepareContext(ctx, listAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query ListAmmo: %w", err)
	}
	if q.listArmorsStmt, err = db.PrepareContext(ctx, listArmors); err != nil {
		return nil, fmt.Errorf("error preparing query ListArmors: %w", err)
	}
	if q.listCharactersStmt, err = db.PrepareContext(ctx, listCharacters); err != nil {
		return nil, fmt.Errorf("error preparing query ListCharacters: %w", err)
	}
	if q.listContainersStmt, err = db.PrepareContext(ctx, listContainers); err != nil {
		return nil, fmt.Errorf("error preparing query ListContainers: %w", err)
	}
	if q.listEquipmentStmt, err = db.PrepareContext(ctx, listEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipment: %w", err)
	}
	if q.listInventoriesStmt, err = db.PrepareContext(ctx, listInventories); err != nil {
		return nil, fmt.Errorf("error preparing query ListInventories: %w", err)
	}
	if q.listMagicItemsStmt, err = db.PrepareContext(ctx, listMagicItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItems: %w", err)
	}
	if q.listMagicItemsByTypeStmt, err = db.PrepareContext(ctx, listMagicItemsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItemsByType: %w", err)
	}
	if q.listPotionsStmt, err = db.PrepareContext(ctx, listPotions); err != nil {
		return nil, fmt.Errorf("error preparing query ListPotions: %w", err)
	}
	if q.listRingsStmt, err = db.PrepareContext(ctx, listRings); err != nil {
		return nil, fmt.Errorf("error preparing query ListRings: %w", err)
	}
	if q.listShieldsStmt, err = db.PrepareContext(ctx, listShields); err != nil {
		return nil, fmt.Errorf("error preparing query ListShields: %w", err)
	}
	if q.listSpellScrollsStmt, err = db.PrepareContext(ctx, listSpellScrolls); err != nil {
		return nil, fmt.Errorf("error preparing query ListSpellScrolls: %w", err)
	}
	if q.listSpellsStmt, err = db.PrepareContext(ctx, listSpells); err != nil {
		return nil, fmt.Errorf("error preparing query ListSpells: %w", err)
	}
	if q.listTreasuresStmt, err = db.PrepareContext(ctx, listTreasures); err != nil {
		return nil, fmt.Errorf("error preparing query ListTreasures: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listWeaponsStmt, err = db.PrepareContext(ctx, listWeapons); err != nil {
		return nil, fmt.Errorf("error preparing query ListWeapons: %w", err)
	}
	if q.markSpellAsMemorizedStmt, err = db.PrepareContext(ctx, markSpellAsMemorized); err != nil {
		return nil, fmt.Errorf("error preparing query MarkSpellAsMemorized: %w", err)
	}
	if q.markSpellAsMemorizedBySpellIDStmt, err = db.PrepareContext(ctx, markSpellAsMemorizedBySpellID); err != nil {
		return nil, fmt.Errorf("error preparing query MarkSpellAsMemorizedBySpellID: %w", err)
	}
	if q.prepareSpellStmt, err = db.PrepareContext(ctx, prepareSpell); err != nil {
		return nil, fmt.Errorf("error preparing query PrepareSpell: %w", err)
	}
	if q.recalculateInventoryWeightStmt, err = db.PrepareContext(ctx, recalculateInventoryWeight); err != nil {
		return nil, fmt.Errorf("error preparing query RecalculateInventoryWeight: %w", err)
	}
	if q.removeAllInventoryItemsStmt, err = db.PrepareContext(ctx, removeAllInventoryItems); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveAllInventoryItems: %w", err)
	}
	if q.removeInventoryItemStmt, err = db.PrepareContext(ctx, removeInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveInventoryItem: %w", err)
	}
	if q.removeKnownSpellStmt, err = db.PrepareContext(ctx, removeKnownSpell); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveKnownSpell: %w", err)
	}
	if q.resetAllMemorizedSpellsStmt, err = db.PrepareContext(ctx, resetAllMemorizedSpells); err != nil {
		return nil, fmt.Errorf("error preparing query ResetAllMemorizedSpells: %w", err)
	}
	if q.unprepareSpellStmt, err = db.PrepareContext(ctx, unprepareSpell); err != nil {
		return nil, fmt.Errorf("error preparing query UnprepareSpell: %w", err)
	}
	if q.updateAmmoStmt, err = db.PrepareContext(ctx, updateAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAmmo: %w", err)
	}
	if q.updateArmorStmt, err = db.PrepareContext(ctx, updateArmor); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArmor: %w", err)
	}
	if q.updateCharacterStmt, err = db.PrepareContext(ctx, updateCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacter: %w", err)
	}
	if q.updateContainerStmt, err = db.PrepareContext(ctx, updateContainer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateContainer: %w", err)
	}
	if q.updateEquipmentStmt, err = db.PrepareContext(ctx, updateEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipment: %w", err)
	}
	if q.updateInventoryStmt, err = db.PrepareContext(ctx, updateInventory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInventory: %w", err)
	}
	if q.updateInventoryItemStmt, err = db.PrepareContext(ctx, updateInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInventoryItem: %w", err)
	}
	if q.updateInventoryWeightStmt, err = db.PrepareContext(ctx, updateInventoryWeight); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInventoryWeight: %w", err)
	}
	if q.updateMagicItemStmt, err = db.PrepareContext(ctx, updateMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMagicItem: %w", err)
	}
	if q.updatePotionStmt, err = db.PrepareContext(ctx, updatePotion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePotion: %w", err)
	}
	if q.updateRingStmt, err = db.PrepareContext(ctx, updateRing); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRing: %w", err)
	}
	if q.updateShieldStmt, err = db.PrepareContext(ctx, updateShield); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShield: %w", err)
	}
	if q.updateSpellStmt, err = db.PrepareContext(ctx, updateSpell); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSpell: %w", err)
	}
	if q.updateSpellScrollStmt, err = db.PrepareContext(ctx, updateSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSpellScroll: %w", err)
	}
	if q.updateTreasureStmt, err = db.PrepareContext(ctx, updateTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTreasure: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateWeaponStmt, err = db.PrepareContext(ctx, updateWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWeapon: %w", err)
	}
	if q.updateWeaponMasteryLevelStmt, err = db.PrepareContext(ctx, updateWeaponMasteryLevel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWeaponMasteryLevel: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addInventoryItemStmt != nil {
		if cerr := q.addInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addInventoryItemStmt: %w", cerr)
		}
	}
	if q.addKnownSpellStmt != nil {
		if cerr := q.addKnownSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addKnownSpellStmt: %w", cerr)
		}
	}
	if q.addWeaponMasteryStmt != nil {
		if cerr := q.addWeaponMasteryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addWeaponMasteryStmt: %w", cerr)
		}
	}
	if q.clearPreparedSpellsStmt != nil {
		if cerr := q.clearPreparedSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing clearPreparedSpellsStmt: %w", cerr)
		}
	}
	if q.countPreparedSpellsByLevelAndClassStmt != nil {
		if cerr := q.countPreparedSpellsByLevelAndClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPreparedSpellsByLevelAndClassStmt: %w", cerr)
		}
	}
	if q.countWeaponMasteriesStmt != nil {
		if cerr := q.countWeaponMasteriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countWeaponMasteriesStmt: %w", cerr)
		}
	}
	if q.createAmmoStmt != nil {
		if cerr := q.createAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAmmoStmt: %w", cerr)
		}
	}
	if q.createArmorStmt != nil {
		if cerr := q.createArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArmorStmt: %w", cerr)
		}
	}
	if q.createCharacterStmt != nil {
		if cerr := q.createCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCharacterStmt: %w", cerr)
		}
	}
	if q.createContainerStmt != nil {
		if cerr := q.createContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createContainerStmt: %w", cerr)
		}
	}
	if q.createEquipmentStmt != nil {
		if cerr := q.createEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentStmt: %w", cerr)
		}
	}
	if q.createInventoryStmt != nil {
		if cerr := q.createInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInventoryStmt: %w", cerr)
		}
	}
	if q.createMagicItemStmt != nil {
		if cerr := q.createMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMagicItemStmt: %w", cerr)
		}
	}
	if q.createPotionStmt != nil {
		if cerr := q.createPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPotionStmt: %w", cerr)
		}
	}
	if q.createRingStmt != nil {
		if cerr := q.createRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRingStmt: %w", cerr)
		}
	}
	if q.createShieldStmt != nil {
		if cerr := q.createShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShieldStmt: %w", cerr)
		}
	}
	if q.createSpellStmt != nil {
		if cerr := q.createSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSpellStmt: %w", cerr)
		}
	}
	if q.createSpellScrollStmt != nil {
		if cerr := q.createSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSpellScrollStmt: %w", cerr)
		}
	}
	if q.createTreasureStmt != nil {
		if cerr := q.createTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTreasureStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWeaponStmt != nil {
		if cerr := q.createWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWeaponStmt: %w", cerr)
		}
	}
	if q.deleteAmmoStmt != nil {
		if cerr := q.deleteAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAmmoStmt: %w", cerr)
		}
	}
	if q.deleteArmorStmt != nil {
		if cerr := q.deleteArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArmorStmt: %w", cerr)
		}
	}
	if q.deleteCharacterStmt != nil {
		if cerr := q.deleteCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCharacterStmt: %w", cerr)
		}
	}
	if q.deleteContainerStmt != nil {
		if cerr := q.deleteContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteContainerStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentStmt != nil {
		if cerr := q.deleteEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentStmt: %w", cerr)
		}
	}
	if q.deleteInventoryStmt != nil {
		if cerr := q.deleteInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteInventoryStmt: %w", cerr)
		}
	}
	if q.deleteMagicItemStmt != nil {
		if cerr := q.deleteMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMagicItemStmt: %w", cerr)
		}
	}
	if q.deletePotionStmt != nil {
		if cerr := q.deletePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePotionStmt: %w", cerr)
		}
	}
	if q.deleteRingStmt != nil {
		if cerr := q.deleteRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRingStmt: %w", cerr)
		}
	}
	if q.deleteShieldStmt != nil {
		if cerr := q.deleteShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteShieldStmt: %w", cerr)
		}
	}
	if q.deleteSpellStmt != nil {
		if cerr := q.deleteSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSpellStmt: %w", cerr)
		}
	}
	if q.deleteSpellScrollStmt != nil {
		if cerr := q.deleteSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSpellScrollStmt: %w", cerr)
		}
	}
	if q.deleteTreasureStmt != nil {
		if cerr := q.deleteTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTreasureStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWeaponStmt != nil {
		if cerr := q.deleteWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWeaponStmt: %w", cerr)
		}
	}
	if q.deleteWeaponMasteryStmt != nil {
		if cerr := q.deleteWeaponMasteryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWeaponMasteryStmt: %w", cerr)
		}
	}
	if q.getAllClassDataStmt != nil {
		if cerr := q.getAllClassDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllClassDataStmt: %w", cerr)
		}
	}
	if q.getAmmoStmt != nil {
		if cerr := q.getAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAmmoStmt: %w", cerr)
		}
	}
	if q.getAmmoByNameStmt != nil {
		if cerr := q.getAmmoByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAmmoByNameStmt: %w", cerr)
		}
	}
	if q.getArmorStmt != nil {
		if cerr := q.getArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorStmt: %w", cerr)
		}
	}
	if q.getArmorByNameStmt != nil {
		if cerr := q.getArmorByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorByNameStmt: %w", cerr)
		}
	}
	if q.getBarbarianAbilitiesStmt != nil {
		if cerr := q.getBarbarianAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBarbarianAbilitiesStmt: %w", cerr)
		}
	}
	if q.getBardAbilitiesStmt != nil {
		if cerr := q.getBardAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBardAbilitiesStmt: %w", cerr)
		}
	}
	if q.getBardDruidSpellsStmt != nil {
		if cerr := q.getBardDruidSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBardDruidSpellsStmt: %w", cerr)
		}
	}
	if q.getBardIllusionistSpellsStmt != nil {
		if cerr := q.getBardIllusionistSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBardIllusionistSpellsStmt: %w", cerr)
		}
	}
	if q.getBerserkerAbilitiesStmt != nil {
		if cerr := q.getBerserkerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBerserkerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getBerserkerNaturalACStmt != nil {
		if cerr := q.getBerserkerNaturalACStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBerserkerNaturalACStmt: %w", cerr)
		}
	}
	if q.getCataphractAbilitiesStmt != nil {
		if cerr := q.getCataphractAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCataphractAbilitiesStmt: %w", cerr)
		}
	}
	if q.getCharacterStmt != nil {
		if cerr := q.getCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharacterStmt: %w", cerr)
		}
	}
	if q.getCharacterForSpellcastingStmt != nil {
		if cerr := q.getCharacterForSpellcastingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharacterForSpellcastingStmt: %w", cerr)
		}
	}
	if q.getCharactersByUserStmt != nil {
		if cerr := q.getCharactersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharactersByUserStmt: %w", cerr)
		}
	}
	if q.getClassAbilitiesStmt != nil {
		if cerr := q.getClassAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassAbilitiesStmt: %w", cerr)
		}
	}
	if q.getClassAbilitiesByLevelStmt != nil {
		if cerr := q.getClassAbilitiesByLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassAbilitiesByLevelStmt: %w", cerr)
		}
	}
	if q.getClassDataStmt != nil {
		if cerr := q.getClassDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassDataStmt: %w", cerr)
		}
	}
	if q.getClassDataForSpellcastingStmt != nil {
		if cerr := q.getClassDataForSpellcastingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassDataForSpellcastingStmt: %w", cerr)
		}
	}
	if q.getClericAbilitiesStmt != nil {
		if cerr := q.getClericAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClericAbilitiesStmt: %w", cerr)
		}
	}
	if q.getClericTurningAbilityStmt != nil {
		if cerr := q.getClericTurningAbilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClericTurningAbilityStmt: %w", cerr)
		}
	}
	if q.getContainerStmt != nil {
		if cerr := q.getContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContainerStmt: %w", cerr)
		}
	}
	if q.getContainerByNameStmt != nil {
		if cerr := q.getContainerByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContainerByNameStmt: %w", cerr)
		}
	}
	if q.getCryomancerAbilitiesStmt != nil {
		if cerr := q.getCryomancerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCryomancerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getDruidAbilitiesStmt != nil {
		if cerr := q.getDruidAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDruidAbilitiesStmt: %w", cerr)
		}
	}
	if q.getEquipmentStmt != nil {
		if cerr := q.getEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentStmt: %w", cerr)
		}
	}
	if q.getEquipmentByNameStmt != nil {
		if cerr := q.getEquipmentByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentByNameStmt: %w", cerr)
		}
	}
	if q.getEquippedItemsStmt != nil {
		if cerr := q.getEquippedItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquippedItemsStmt: %w", cerr)
		}
	}
	if q.getFighterAbilitiesStmt != nil {
		if cerr := q.getFighterAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFighterAbilitiesStmt: %w", cerr)
		}
	}
	if q.getFullUserByEmailStmt != nil {
		if cerr := q.getFullUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFullUserByEmailStmt: %w", cerr)
		}
	}
	if q.getHuntsmanAbilitiesStmt != nil {
		if cerr := q.getHuntsmanAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHuntsmanAbilitiesStmt: %w", cerr)
		}
	}
	if q.getIllusionistAbilitiesStmt != nil {
		if cerr := q.getIllusionistAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIllusionistAbilitiesStmt: %w", cerr)
		}
	}
	if q.getInventoryStmt != nil {
		if cerr := q.getInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryStmt: %w", cerr)
		}
	}
	if q.getInventoryByCharacterStmt != nil {
		if cerr := q.getInventoryByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryByCharacterStmt: %w", cerr)
		}
	}
	if q.getInventoryItemStmt != nil {
		if cerr := q.getInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemStmt: %w", cerr)
		}
	}
	if q.getInventoryItemByTypeAndItemIDStmt != nil {
		if cerr := q.getInventoryItemByTypeAndItemIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemByTypeAndItemIDStmt: %w", cerr)
		}
	}
	if q.getInventoryItemsStmt != nil {
		if cerr := q.getInventoryItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemsStmt: %w", cerr)
		}
	}
	if q.getInventoryItemsByTypeStmt != nil {
		if cerr := q.getInventoryItemsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemsByTypeStmt: %w", cerr)
		}
	}
	if q.getItemsBySlotStmt != nil {
		if cerr := q.getItemsBySlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsBySlotStmt: %w", cerr)
		}
	}
	if q.getKnownSpellByCharacterAndSpellStmt != nil {
		if cerr := q.getKnownSpellByCharacterAndSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKnownSpellByCharacterAndSpellStmt: %w", cerr)
		}
	}
	if q.getKnownSpellsStmt != nil {
		if cerr := q.getKnownSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKnownSpellsStmt: %w", cerr)
		}
	}
	if q.getKnownSpellsByClassStmt != nil {
		if cerr := q.getKnownSpellsByClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getKnownSpellsByClassStmt: %w", cerr)
		}
	}
	if q.getLegerdemainistAbilitiesStmt != nil {
		if cerr := q.getLegerdemainistAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLegerdemainistAbilitiesStmt: %w", cerr)
		}
	}
	if q.getMagicItemStmt != nil {
		if cerr := q.getMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemStmt: %w", cerr)
		}
	}
	if q.getMagicItemByNameStmt != nil {
		if cerr := q.getMagicItemByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemByNameStmt: %w", cerr)
		}
	}
	if q.getMagicianAbilitiesStmt != nil {
		if cerr := q.getMagicianAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicianAbilitiesStmt: %w", cerr)
		}
	}
	if q.getMonkACBonusStmt != nil {
		if cerr := q.getMonkACBonusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMonkACBonusStmt: %w", cerr)
		}
	}
	if q.getMonkAbilitiesStmt != nil {
		if cerr := q.getMonkAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMonkAbilitiesStmt: %w", cerr)
		}
	}
	if q.getMonkEmptyHandDamageStmt != nil {
		if cerr := q.getMonkEmptyHandDamageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMonkEmptyHandDamageStmt: %w", cerr)
		}
	}
	if q.getNecromancerAbilitiesStmt != nil {
		if cerr := q.getNecromancerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNecromancerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getNecromancerTurningAbilityStmt != nil {
		if cerr := q.getNecromancerTurningAbilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNecromancerTurningAbilityStmt: %w", cerr)
		}
	}
	if q.getNextAvailableSlotIndexStmt != nil {
		if cerr := q.getNextAvailableSlotIndexStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNextAvailableSlotIndexStmt: %w", cerr)
		}
	}
	if q.getNextLevelDataStmt != nil {
		if cerr := q.getNextLevelDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNextLevelDataStmt: %w", cerr)
		}
	}
	if q.getPaladinAbilitiesStmt != nil {
		if cerr := q.getPaladinAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaladinAbilitiesStmt: %w", cerr)
		}
	}
	if q.getPaladinTurningAbilityStmt != nil {
		if cerr := q.getPaladinTurningAbilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaladinTurningAbilityStmt: %w", cerr)
		}
	}
	if q.getPotionStmt != nil {
		if cerr := q.getPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionStmt: %w", cerr)
		}
	}
	if q.getPotionByNameStmt != nil {
		if cerr := q.getPotionByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionByNameStmt: %w", cerr)
		}
	}
	if q.getPreparedSpellByCharacterAndSpellStmt != nil {
		if cerr := q.getPreparedSpellByCharacterAndSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPreparedSpellByCharacterAndSpellStmt: %w", cerr)
		}
	}
	if q.getPreparedSpellsStmt != nil {
		if cerr := q.getPreparedSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPreparedSpellsStmt: %w", cerr)
		}
	}
	if q.getPreparedSpellsByClassStmt != nil {
		if cerr := q.getPreparedSpellsByClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPreparedSpellsByClassStmt: %w", cerr)
		}
	}
	if q.getPriestAbilitiesStmt != nil {
		if cerr := q.getPriestAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPriestAbilitiesStmt: %w", cerr)
		}
	}
	if q.getPurloinerAbilitiesStmt != nil {
		if cerr := q.getPurloinerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPurloinerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getPyromancerAbilitiesStmt != nil {
		if cerr := q.getPyromancerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPyromancerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getRangerAbilitiesStmt != nil {
		if cerr := q.getRangerAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRangerAbilitiesStmt: %w", cerr)
		}
	}
	if q.getRangerDruidSpellSlotsStmt != nil {
		if cerr := q.getRangerDruidSpellSlotsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRangerDruidSpellSlotsStmt: %w", cerr)
		}
	}
	if q.getRangerMagicianSpellSlotsStmt != nil {
		if cerr := q.getRangerMagicianSpellSlotsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRangerMagicianSpellSlotsStmt: %w", cerr)
		}
	}
	if q.getRingStmt != nil {
		if cerr := q.getRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRingStmt: %w", cerr)
		}
	}
	if q.getRingByNameStmt != nil {
		if cerr := q.getRingByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRingByNameStmt: %w", cerr)
		}
	}
	if q.getRunegraverAbilitiesStmt != nil {
		if cerr := q.getRunegraverAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRunegraverAbilitiesStmt: %w", cerr)
		}
	}
	if q.getRunesPerDayStmt != nil {
		if cerr := q.getRunesPerDayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRunesPerDayStmt: %w", cerr)
		}
	}
	if q.getScoutAbilitiesStmt != nil {
		if cerr := q.getScoutAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoutAbilitiesStmt: %w", cerr)
		}
	}
	if q.getShamanAbilitiesStmt != nil {
		if cerr := q.getShamanAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShamanAbilitiesStmt: %w", cerr)
		}
	}
	if q.getShamanArcaneSpellsStmt != nil {
		if cerr := q.getShamanArcaneSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShamanArcaneSpellsStmt: %w", cerr)
		}
	}
	if q.getShamanDivineSpellsStmt != nil {
		if cerr := q.getShamanDivineSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShamanDivineSpellsStmt: %w", cerr)
		}
	}
	if q.getShieldStmt != nil {
		if cerr := q.getShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldStmt: %w", cerr)
		}
	}
	if q.getShieldByNameStmt != nil {
		if cerr := q.getShieldByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldByNameStmt: %w", cerr)
		}
	}
	if q.getSpellStmt != nil {
		if cerr := q.getSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellStmt: %w", cerr)
		}
	}
	if q.getSpellForSpellcastingStmt != nil {
		if cerr := q.getSpellForSpellcastingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellForSpellcastingStmt: %w", cerr)
		}
	}
	if q.getSpellScrollStmt != nil {
		if cerr := q.getSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellScrollStmt: %w", cerr)
		}
	}
	if q.getSpellScrollsBySpellStmt != nil {
		if cerr := q.getSpellScrollsBySpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellScrollsBySpellStmt: %w", cerr)
		}
	}
	if q.getSpellsByClassLevelStmt != nil {
		if cerr := q.getSpellsByClassLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellsByClassLevelStmt: %w", cerr)
		}
	}
	if q.getThiefAbilitiesStmt != nil {
		if cerr := q.getThiefAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThiefAbilitiesStmt: %w", cerr)
		}
	}
	if q.getThiefSkillsByLevelStmt != nil {
		if cerr := q.getThiefSkillsByLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThiefSkillsByLevelStmt: %w", cerr)
		}
	}
	if q.getTreasureStmt != nil {
		if cerr := q.getTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTreasureStmt: %w", cerr)
		}
	}
	if q.getTreasureByCharacterStmt != nil {
		if cerr := q.getTreasureByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTreasureByCharacterStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWarlockAbilitiesStmt != nil {
		if cerr := q.getWarlockAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWarlockAbilitiesStmt: %w", cerr)
		}
	}
	if q.getWeaponStmt != nil {
		if cerr := q.getWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponStmt: %w", cerr)
		}
	}
	if q.getWeaponByNameStmt != nil {
		if cerr := q.getWeaponByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponByNameStmt: %w", cerr)
		}
	}
	if q.getWeaponMasteriesByCharacterStmt != nil {
		if cerr := q.getWeaponMasteriesByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponMasteriesByCharacterStmt: %w", cerr)
		}
	}
	if q.getWeaponMasteryByBaseNameStmt != nil {
		if cerr := q.getWeaponMasteryByBaseNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponMasteryByBaseNameStmt: %w", cerr)
		}
	}
	if q.getWeaponMasteryByIDStmt != nil {
		if cerr := q.getWeaponMasteryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponMasteryByIDStmt: %w", cerr)
		}
	}
	if q.getWitchAbilitiesStmt != nil {
		if cerr := q.getWitchAbilitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWitchAbilitiesStmt: %w", cerr)
		}
	}
	if q.listAmmoStmt != nil {
		if cerr := q.listAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAmmoStmt: %w", cerr)
		}
	}
	if q.listArmorsStmt != nil {
		if cerr := q.listArmorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listArmorsStmt: %w", cerr)
		}
	}
	if q.listCharactersStmt != nil {
		if cerr := q.listCharactersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCharactersStmt: %w", cerr)
		}
	}
	if q.listContainersStmt != nil {
		if cerr := q.listContainersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listContainersStmt: %w", cerr)
		}
	}
	if q.listEquipmentStmt != nil {
		if cerr := q.listEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentStmt: %w", cerr)
		}
	}
	if q.listInventoriesStmt != nil {
		if cerr := q.listInventoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listInventoriesStmt: %w", cerr)
		}
	}
	if q.listMagicItemsStmt != nil {
		if cerr := q.listMagicItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsStmt: %w", cerr)
		}
	}
	if q.listMagicItemsByTypeStmt != nil {
		if cerr := q.listMagicItemsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsByTypeStmt: %w", cerr)
		}
	}
	if q.listPotionsStmt != nil {
		if cerr := q.listPotionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPotionsStmt: %w", cerr)
		}
	}
	if q.listRingsStmt != nil {
		if cerr := q.listRingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRingsStmt: %w", cerr)
		}
	}
	if q.listShieldsStmt != nil {
		if cerr := q.listShieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listShieldsStmt: %w", cerr)
		}
	}
	if q.listSpellScrollsStmt != nil {
		if cerr := q.listSpellScrollsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSpellScrollsStmt: %w", cerr)
		}
	}
	if q.listSpellsStmt != nil {
		if cerr := q.listSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSpellsStmt: %w", cerr)
		}
	}
	if q.listTreasuresStmt != nil {
		if cerr := q.listTreasuresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTreasuresStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listWeaponsStmt != nil {
		if cerr := q.listWeaponsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWeaponsStmt: %w", cerr)
		}
	}
	if q.markSpellAsMemorizedStmt != nil {
		if cerr := q.markSpellAsMemorizedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markSpellAsMemorizedStmt: %w", cerr)
		}
	}
	if q.markSpellAsMemorizedBySpellIDStmt != nil {
		if cerr := q.markSpellAsMemorizedBySpellIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markSpellAsMemorizedBySpellIDStmt: %w", cerr)
		}
	}
	if q.prepareSpellStmt != nil {
		if cerr := q.prepareSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing prepareSpellStmt: %w", cerr)
		}
	}
	if q.recalculateInventoryWeightStmt != nil {
		if cerr := q.recalculateInventoryWeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recalculateInventoryWeightStmt: %w", cerr)
		}
	}
	if q.removeAllInventoryItemsStmt != nil {
		if cerr := q.removeAllInventoryItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeAllInventoryItemsStmt: %w", cerr)
		}
	}
	if q.removeInventoryItemStmt != nil {
		if cerr := q.removeInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeInventoryItemStmt: %w", cerr)
		}
	}
	if q.removeKnownSpellStmt != nil {
		if cerr := q.removeKnownSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeKnownSpellStmt: %w", cerr)
		}
	}
	if q.resetAllMemorizedSpellsStmt != nil {
		if cerr := q.resetAllMemorizedSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetAllMemorizedSpellsStmt: %w", cerr)
		}
	}
	if q.unprepareSpellStmt != nil {
		if cerr := q.unprepareSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unprepareSpellStmt: %w", cerr)
		}
	}
	if q.updateAmmoStmt != nil {
		if cerr := q.updateAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAmmoStmt: %w", cerr)
		}
	}
	if q.updateArmorStmt != nil {
		if cerr := q.updateArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArmorStmt: %w", cerr)
		}
	}
	if q.updateCharacterStmt != nil {
		if cerr := q.updateCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterStmt: %w", cerr)
		}
	}
	if q.updateContainerStmt != nil {
		if cerr := q.updateContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateContainerStmt: %w", cerr)
		}
	}
	if q.updateEquipmentStmt != nil {
		if cerr := q.updateEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentStmt: %w", cerr)
		}
	}
	if q.updateInventoryStmt != nil {
		if cerr := q.updateInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInventoryStmt: %w", cerr)
		}
	}
	if q.updateInventoryItemStmt != nil {
		if cerr := q.updateInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInventoryItemStmt: %w", cerr)
		}
	}
	if q.updateInventoryWeightStmt != nil {
		if cerr := q.updateInventoryWeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInventoryWeightStmt: %w", cerr)
		}
	}
	if q.updateMagicItemStmt != nil {
		if cerr := q.updateMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMagicItemStmt: %w", cerr)
		}
	}
	if q.updatePotionStmt != nil {
		if cerr := q.updatePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePotionStmt: %w", cerr)
		}
	}
	if q.updateRingStmt != nil {
		if cerr := q.updateRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRingStmt: %w", cerr)
		}
	}
	if q.updateShieldStmt != nil {
		if cerr := q.updateShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShieldStmt: %w", cerr)
		}
	}
	if q.updateSpellStmt != nil {
		if cerr := q.updateSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSpellStmt: %w", cerr)
		}
	}
	if q.updateSpellScrollStmt != nil {
		if cerr := q.updateSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSpellScrollStmt: %w", cerr)
		}
	}
	if q.updateTreasureStmt != nil {
		if cerr := q.updateTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTreasureStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateWeaponStmt != nil {
		if cerr := q.updateWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWeaponStmt: %w", cerr)
		}
	}
	if q.updateWeaponMasteryLevelStmt != nil {
		if cerr := q.updateWeaponMasteryLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWeaponMasteryLevelStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	addInventoryItemStmt                    *sql.Stmt
	addKnownSpellStmt                       *sql.Stmt
	addWeaponMasteryStmt                    *sql.Stmt
	clearPreparedSpellsStmt                 *sql.Stmt
	countPreparedSpellsByLevelAndClassStmt  *sql.Stmt
	countWeaponMasteriesStmt                *sql.Stmt
	createAmmoStmt                          *sql.Stmt
	createArmorStmt                         *sql.Stmt
	createCharacterStmt                     *sql.Stmt
	createContainerStmt                     *sql.Stmt
	createEquipmentStmt                     *sql.Stmt
	createInventoryStmt                     *sql.Stmt
	createMagicItemStmt                     *sql.Stmt
	createPotionStmt                        *sql.Stmt
	createRingStmt                          *sql.Stmt
	createShieldStmt                        *sql.Stmt
	createSpellStmt                         *sql.Stmt
	createSpellScrollStmt                   *sql.Stmt
	createTreasureStmt                      *sql.Stmt
	createUserStmt                          *sql.Stmt
	createWeaponStmt                        *sql.Stmt
	deleteAmmoStmt                          *sql.Stmt
	deleteArmorStmt                         *sql.Stmt
	deleteCharacterStmt                     *sql.Stmt
	deleteContainerStmt                     *sql.Stmt
	deleteEquipmentStmt                     *sql.Stmt
	deleteInventoryStmt                     *sql.Stmt
	deleteMagicItemStmt                     *sql.Stmt
	deletePotionStmt                        *sql.Stmt
	deleteRingStmt                          *sql.Stmt
	deleteShieldStmt                        *sql.Stmt
	deleteSpellStmt                         *sql.Stmt
	deleteSpellScrollStmt                   *sql.Stmt
	deleteTreasureStmt                      *sql.Stmt
	deleteUserStmt                          *sql.Stmt
	deleteWeaponStmt                        *sql.Stmt
	deleteWeaponMasteryStmt                 *sql.Stmt
	getAllClassDataStmt                     *sql.Stmt
	getAmmoStmt                             *sql.Stmt
	getAmmoByNameStmt                       *sql.Stmt
	getArmorStmt                            *sql.Stmt
	getArmorByNameStmt                      *sql.Stmt
	getBarbarianAbilitiesStmt               *sql.Stmt
	getBardAbilitiesStmt                    *sql.Stmt
	getBardDruidSpellsStmt                  *sql.Stmt
	getBardIllusionistSpellsStmt            *sql.Stmt
	getBerserkerAbilitiesStmt               *sql.Stmt
	getBerserkerNaturalACStmt               *sql.Stmt
	getCataphractAbilitiesStmt              *sql.Stmt
	getCharacterStmt                        *sql.Stmt
	getCharacterForSpellcastingStmt         *sql.Stmt
	getCharactersByUserStmt                 *sql.Stmt
	getClassAbilitiesStmt                   *sql.Stmt
	getClassAbilitiesByLevelStmt            *sql.Stmt
	getClassDataStmt                        *sql.Stmt
	getClassDataForSpellcastingStmt         *sql.Stmt
	getClericAbilitiesStmt                  *sql.Stmt
	getClericTurningAbilityStmt             *sql.Stmt
	getContainerStmt                        *sql.Stmt
	getContainerByNameStmt                  *sql.Stmt
	getCryomancerAbilitiesStmt              *sql.Stmt
	getDruidAbilitiesStmt                   *sql.Stmt
	getEquipmentStmt                        *sql.Stmt
	getEquipmentByNameStmt                  *sql.Stmt
	getEquippedItemsStmt                    *sql.Stmt
	getFighterAbilitiesStmt                 *sql.Stmt
	getFullUserByEmailStmt                  *sql.Stmt
	getHuntsmanAbilitiesStmt                *sql.Stmt
	getIllusionistAbilitiesStmt             *sql.Stmt
	getInventoryStmt                        *sql.Stmt
	getInventoryByCharacterStmt             *sql.Stmt
	getInventoryItemStmt                    *sql.Stmt
	getInventoryItemByTypeAndItemIDStmt     *sql.Stmt
	getInventoryItemsStmt                   *sql.Stmt
	getInventoryItemsByTypeStmt             *sql.Stmt
	getItemsBySlotStmt                      *sql.Stmt
	getKnownSpellByCharacterAndSpellStmt    *sql.Stmt
	getKnownSpellsStmt                      *sql.Stmt
	getKnownSpellsByClassStmt               *sql.Stmt
	getLegerdemainistAbilitiesStmt          *sql.Stmt
	getMagicItemStmt                        *sql.Stmt
	getMagicItemByNameStmt                  *sql.Stmt
	getMagicianAbilitiesStmt                *sql.Stmt
	getMonkACBonusStmt                      *sql.Stmt
	getMonkAbilitiesStmt                    *sql.Stmt
	getMonkEmptyHandDamageStmt              *sql.Stmt
	getNecromancerAbilitiesStmt             *sql.Stmt
	getNecromancerTurningAbilityStmt        *sql.Stmt
	getNextAvailableSlotIndexStmt           *sql.Stmt
	getNextLevelDataStmt                    *sql.Stmt
	getPaladinAbilitiesStmt                 *sql.Stmt
	getPaladinTurningAbilityStmt            *sql.Stmt
	getPotionStmt                           *sql.Stmt
	getPotionByNameStmt                     *sql.Stmt
	getPreparedSpellByCharacterAndSpellStmt *sql.Stmt
	getPreparedSpellsStmt                   *sql.Stmt
	getPreparedSpellsByClassStmt            *sql.Stmt
	getPriestAbilitiesStmt                  *sql.Stmt
	getPurloinerAbilitiesStmt               *sql.Stmt
	getPyromancerAbilitiesStmt              *sql.Stmt
	getRangerAbilitiesStmt                  *sql.Stmt
	getRangerDruidSpellSlotsStmt            *sql.Stmt
	getRangerMagicianSpellSlotsStmt         *sql.Stmt
	getRingStmt                             *sql.Stmt
	getRingByNameStmt                       *sql.Stmt
	getRunegraverAbilitiesStmt              *sql.Stmt
	getRunesPerDayStmt                      *sql.Stmt
	getScoutAbilitiesStmt                   *sql.Stmt
	getShamanAbilitiesStmt                  *sql.Stmt
	getShamanArcaneSpellsStmt               *sql.Stmt
	getShamanDivineSpellsStmt               *sql.Stmt
	getShieldStmt                           *sql.Stmt
	getShieldByNameStmt                     *sql.Stmt
	getSpellStmt                            *sql.Stmt
	getSpellForSpellcastingStmt             *sql.Stmt
	getSpellScrollStmt                      *sql.Stmt
	getSpellScrollsBySpellStmt              *sql.Stmt
	getSpellsByClassLevelStmt               *sql.Stmt
	getThiefAbilitiesStmt                   *sql.Stmt
	getThiefSkillsByLevelStmt               *sql.Stmt
	getTreasureStmt                         *sql.Stmt
	getTreasureByCharacterStmt              *sql.Stmt
	getUserStmt                             *sql.Stmt
	getWarlockAbilitiesStmt                 *sql.Stmt
	getWeaponStmt                           *sql.Stmt
	getWeaponByNameStmt                     *sql.Stmt
	getWeaponMasteriesByCharacterStmt       *sql.Stmt
	getWeaponMasteryByBaseNameStmt          *sql.Stmt
	getWeaponMasteryByIDStmt                *sql.Stmt
	getWitchAbilitiesStmt                   *sql.Stmt
	listAmmoStmt                            *sql.Stmt
	listArmorsStmt                          *sql.Stmt
	listCharactersStmt                      *sql.Stmt
	listContainersStmt                      *sql.Stmt
	listEquipmentStmt                       *sql.Stmt
	listInventoriesStmt                     *sql.Stmt
	listMagicItemsStmt                      *sql.Stmt
	listMagicItemsByTypeStmt                *sql.Stmt
	listPotionsStmt                         *sql.Stmt
	listRingsStmt                           *sql.Stmt
	listShieldsStmt                         *sql.Stmt
	listSpellScrollsStmt                    *sql.Stmt
	listSpellsStmt                          *sql.Stmt
	listTreasuresStmt                       *sql.Stmt
	listUsersStmt                           *sql.Stmt
	listWeaponsStmt                         *sql.Stmt
	markSpellAsMemorizedStmt                *sql.Stmt
	markSpellAsMemorizedBySpellIDStmt       *sql.Stmt
	prepareSpellStmt                        *sql.Stmt
	recalculateInventoryWeightStmt          *sql.Stmt
	removeAllInventoryItemsStmt             *sql.Stmt
	removeInventoryItemStmt                 *sql.Stmt
	removeKnownSpellStmt                    *sql.Stmt
	resetAllMemorizedSpellsStmt             *sql.Stmt
	unprepareSpellStmt                      *sql.Stmt
	updateAmmoStmt                          *sql.Stmt
	updateArmorStmt                         *sql.Stmt
	updateCharacterStmt                     *sql.Stmt
	updateContainerStmt                     *sql.Stmt
	updateEquipmentStmt                     *sql.Stmt
	updateInventoryStmt                     *sql.Stmt
	updateInventoryItemStmt                 *sql.Stmt
	updateInventoryWeightStmt               *sql.Stmt
	updateMagicItemStmt                     *sql.Stmt
	updatePotionStmt                        *sql.Stmt
	updateRingStmt                          *sql.Stmt
	updateShieldStmt                        *sql.Stmt
	updateSpellStmt                         *sql.Stmt
	updateSpellScrollStmt                   *sql.Stmt
	updateTreasureStmt                      *sql.Stmt
	updateUserStmt                          *sql.Stmt
	updateUserPasswordStmt                  *sql.Stmt
	updateWeaponStmt                        *sql.Stmt
	updateWeaponMasteryLevelStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		addInventoryItemStmt:                    q.addInventoryItemStmt,
		addKnownSpellStmt:                       q.addKnownSpellStmt,
		addWeaponMasteryStmt:                    q.addWeaponMasteryStmt,
		clearPreparedSpellsStmt:                 q.clearPreparedSpellsStmt,
		countPreparedSpellsByLevelAndClassStmt:  q.countPreparedSpellsByLevelAndClassStmt,
		countWeaponMasteriesStmt:                q.countWeaponMasteriesStmt,
		createAmmoStmt:                          q.createAmmoStmt,
		createArmorStmt:                         q.createArmorStmt,
		createCharacterStmt:                     q.createCharacterStmt,
		createContainerStmt:                     q.createContainerStmt,
		createEquipmentStmt:                     q.createEquipmentStmt,
		createInventoryStmt:                     q.createInventoryStmt,
		createMagicItemStmt:                     q.createMagicItemStmt,
		createPotionStmt:                        q.createPotionStmt,
		createRingStmt:                          q.createRingStmt,
		createShieldStmt:                        q.createShieldStmt,
		createSpellStmt:                         q.createSpellStmt,
		createSpellScrollStmt:                   q.createSpellScrollStmt,
		createTreasureStmt:                      q.createTreasureStmt,
		createUserStmt:                          q.createUserStmt,
		createWeaponStmt:                        q.createWeaponStmt,
		deleteAmmoStmt:                          q.deleteAmmoStmt,
		deleteArmorStmt:                         q.deleteArmorStmt,
		deleteCharacterStmt:                     q.deleteCharacterStmt,
		deleteContainerStmt:                     q.deleteContainerStmt,
		deleteEquipmentStmt:                     q.deleteEquipmentStmt,
		deleteInventoryStmt:                     q.deleteInventoryStmt,
		deleteMagicItemStmt:                     q.deleteMagicItemStmt,
		deletePotionStmt:                        q.deletePotionStmt,
		deleteRingStmt:                          q.deleteRingStmt,
		deleteShieldStmt:                        q.deleteShieldStmt,
		deleteSpellStmt:                         q.deleteSpellStmt,
		deleteSpellScrollStmt:                   q.deleteSpellScrollStmt,
		deleteTreasureStmt:                      q.deleteTreasureStmt,
		deleteUserStmt:                          q.deleteUserStmt,
		deleteWeaponStmt:                        q.deleteWeaponStmt,
		deleteWeaponMasteryStmt:                 q.deleteWeaponMasteryStmt,
		getAllClassDataStmt:                     q.getAllClassDataStmt,
		getAmmoStmt:                             q.getAmmoStmt,
		getAmmoByNameStmt:                       q.getAmmoByNameStmt,
		getArmorStmt:                            q.getArmorStmt,
		getArmorByNameStmt:                      q.getArmorByNameStmt,
		getBarbarianAbilitiesStmt:               q.getBarbarianAbilitiesStmt,
		getBardAbilitiesStmt:                    q.getBardAbilitiesStmt,
		getBardDruidSpellsStmt:                  q.getBardDruidSpellsStmt,
		getBardIllusionistSpellsStmt:            q.getBardIllusionistSpellsStmt,
		getBerserkerAbilitiesStmt:               q.getBerserkerAbilitiesStmt,
		getBerserkerNaturalACStmt:               q.getBerserkerNaturalACStmt,
		getCataphractAbilitiesStmt:              q.getCataphractAbilitiesStmt,
		getCharacterStmt:                        q.getCharacterStmt,
		getCharacterForSpellcastingStmt:         q.getCharacterForSpellcastingStmt,
		getCharactersByUserStmt:                 q.getCharactersByUserStmt,
		getClassAbilitiesStmt:                   q.getClassAbilitiesStmt,
		getClassAbilitiesByLevelStmt:            q.getClassAbilitiesByLevelStmt,
		getClassDataStmt:                        q.getClassDataStmt,
		getClassDataForSpellcastingStmt:         q.getClassDataForSpellcastingStmt,
		getClericAbilitiesStmt:                  q.getClericAbilitiesStmt,
		getClericTurningAbilityStmt:             q.getClericTurningAbilityStmt,
		getContainerStmt:                        q.getContainerStmt,
		getContainerByNameStmt:                  q.getContainerByNameStmt,
		getCryomancerAbilitiesStmt:              q.getCryomancerAbilitiesStmt,
		getDruidAbilitiesStmt:                   q.getDruidAbilitiesStmt,
		getEquipmentStmt:                        q.getEquipmentStmt,
		getEquipmentByNameStmt:                  q.getEquipmentByNameStmt,
		getEquippedItemsStmt:                    q.getEquippedItemsStmt,
		getFighterAbilitiesStmt:                 q.getFighterAbilitiesStmt,
		getFullUserByEmailStmt:                  q.getFullUserByEmailStmt,
		getHuntsmanAbilitiesStmt:                q.getHuntsmanAbilitiesStmt,
		getIllusionistAbilitiesStmt:             q.getIllusionistAbilitiesStmt,
		getInventoryStmt:                        q.getInventoryStmt,
		getInventoryByCharacterStmt:             q.getInventoryByCharacterStmt,
		getInventoryItemStmt:                    q.getInventoryItemStmt,
		getInventoryItemByTypeAndItemIDStmt:     q.getInventoryItemByTypeAndItemIDStmt,
		getInventoryItemsStmt:                   q.getInventoryItemsStmt,
		getInventoryItemsByTypeStmt:             q.getInventoryItemsByTypeStmt,
		getItemsBySlotStmt:                      q.getItemsBySlotStmt,
		getKnownSpellByCharacterAndSpellStmt:    q.getKnownSpellByCharacterAndSpellStmt,
		getKnownSpellsStmt:                      q.getKnownSpellsStmt,
		getKnownSpellsByClassStmt:               q.getKnownSpellsByClassStmt,
		getLegerdemainistAbilitiesStmt:          q.getLegerdemainistAbilitiesStmt,
		getMagicItemStmt:                        q.getMagicItemStmt,
		getMagicItemByNameStmt:                  q.getMagicItemByNameStmt,
		getMagicianAbilitiesStmt:                q.getMagicianAbilitiesStmt,
		getMonkACBonusStmt:                      q.getMonkACBonusStmt,
		getMonkAbilitiesStmt:                    q.getMonkAbilitiesStmt,
		getMonkEmptyHandDamageStmt:              q.getMonkEmptyHandDamageStmt,
		getNecromancerAbilitiesStmt:             q.getNecromancerAbilitiesStmt,
		getNecromancerTurningAbilityStmt:        q.getNecromancerTurningAbilityStmt,
		getNextAvailableSlotIndexStmt:           q.getNextAvailableSlotIndexStmt,
		getNextLevelDataStmt:                    q.getNextLevelDataStmt,
		getPaladinAbilitiesStmt:                 q.getPaladinAbilitiesStmt,
		getPaladinTurningAbilityStmt:            q.getPaladinTurningAbilityStmt,
		getPotionStmt:                           q.getPotionStmt,
		getPotionByNameStmt:                     q.getPotionByNameStmt,
		getPreparedSpellByCharacterAndSpellStmt: q.getPreparedSpellByCharacterAndSpellStmt,
		getPreparedSpellsStmt:                   q.getPreparedSpellsStmt,
		getPreparedSpellsByClassStmt:            q.getPreparedSpellsByClassStmt,
		getPriestAbilitiesStmt:                  q.getPriestAbilitiesStmt,
		getPurloinerAbilitiesStmt:               q.getPurloinerAbilitiesStmt,
		getPyromancerAbilitiesStmt:              q.getPyromancerAbilitiesStmt,
		getRangerAbilitiesStmt:                  q.getRangerAbilitiesStmt,
		getRangerDruidSpellSlotsStmt:            q.getRangerDruidSpellSlotsStmt,
		getRangerMagicianSpellSlotsStmt:         q.getRangerMagicianSpellSlotsStmt,
		getRingStmt:                             q.getRingStmt,
		getRingByNameStmt:                       q.getRingByNameStmt,
		getRunegraverAbilitiesStmt:              q.getRunegraverAbilitiesStmt,
		getRunesPerDayStmt:                      q.getRunesPerDayStmt,
		getScoutAbilitiesStmt:                   q.getScoutAbilitiesStmt,
		getShamanAbilitiesStmt:                  q.getShamanAbilitiesStmt,
		getShamanArcaneSpellsStmt:               q.getShamanArcaneSpellsStmt,
		getShamanDivineSpellsStmt:               q.getShamanDivineSpellsStmt,
		getShieldStmt:                           q.getShieldStmt,
		getShieldByNameStmt:                     q.getShieldByNameStmt,
		getSpellStmt:                            q.getSpellStmt,
		getSpellForSpellcastingStmt:             q.getSpellForSpellcastingStmt,
		getSpellScrollStmt:                      q.getSpellScrollStmt,
		getSpellScrollsBySpellStmt:              q.getSpellScrollsBySpellStmt,
		getSpellsByClassLevelStmt:               q.getSpellsByClassLevelStmt,
		getThiefAbilitiesStmt:                   q.getThiefAbilitiesStmt,
		getThiefSkillsByLevelStmt:               q.getThiefSkillsByLevelStmt,
		getTreasureStmt:                         q.getTreasureStmt,
		getTreasureByCharacterStmt:              q.getTreasureByCharacterStmt,
		getUserStmt:                             q.getUserStmt,
		getWarlockAbilitiesStmt:                 q.getWarlockAbilitiesStmt,
		getWeaponStmt:                           q.getWeaponStmt,
		getWeaponByNameStmt:                     q.getWeaponByNameStmt,
		getWeaponMasteriesByCharacterStmt:       q.getWeaponMasteriesByCharacterStmt,
		getWeaponMasteryByBaseNameStmt:          q.getWeaponMasteryByBaseNameStmt,
		getWeaponMasteryByIDStmt:                q.getWeaponMasteryByIDStmt,
		getWitchAbilitiesStmt:                   q.getWitchAbilitiesStmt,
		listAmmoStmt:                            q.listAmmoStmt,
		listArmorsStmt:                          q.listArmorsStmt,
		listCharactersStmt:                      q.listCharactersStmt,
		listContainersStmt:                      q.listContainersStmt,
		listEquipmentStmt:                       q.listEquipmentStmt,
		listInventoriesStmt:                     q.listInventoriesStmt,
		listMagicItemsStmt:                      q.listMagicItemsStmt,
		listMagicItemsByTypeStmt:                q.listMagicItemsByTypeStmt,
		listPotionsStmt:                         q.listPotionsStmt,
		listRingsStmt:                           q.listRingsStmt,
		listShieldsStmt:                         q.listShieldsStmt,
		listSpellScrollsStmt:                    q.listSpellScrollsStmt,
		listSpellsStmt:                          q.listSpellsStmt,
		listTreasuresStmt:                       q.listTreasuresStmt,
		listUsersStmt:                           q.listUsersStmt,
		listWeaponsStmt:                         q.listWeaponsStmt,
		markSpellAsMemorizedStmt:                q.markSpellAsMemorizedStmt,
		markSpellAsMemorizedBySpellIDStmt:       q.markSpellAsMemorizedBySpellIDStmt,
		prepareSpellStmt:                        q.prepareSpellStmt,
		recalculateInventoryWeightStmt:          q.recalculateInventoryWeightStmt,
		removeAllInventoryItemsStmt:             q.removeAllInventoryItemsStmt,
		removeInventoryItemStmt:                 q.removeInventoryItemStmt,
		removeKnownSpellStmt:                    q.removeKnownSpellStmt,
		resetAllMemorizedSpellsStmt:             q.resetAllMemorizedSpellsStmt,
		unprepareSpellStmt:                      q.unprepareSpellStmt,
		updateAmmoStmt:                          q.updateAmmoStmt,
		updateArmorStmt:                         q.updateArmorStmt,
		updateCharacterStmt:                     q.updateCharacterStmt,
		updateContainerStmt:                     q.updateContainerStmt,
		updateEquipmentStmt:                     q.updateEquipmentStmt,
		updateInventoryStmt:                     q.updateInventoryStmt,
		updateInventoryItemStmt:                 q.updateInventoryItemStmt,
		updateInventoryWeightStmt:               q.updateInventoryWeightStmt,
		updateMagicItemStmt:                     q.updateMagicItemStmt,
		updatePotionStmt:                        q.updatePotionStmt,
		updateRingStmt:                          q.updateRingStmt,
		updateShieldStmt:                        q.updateShieldStmt,
		updateSpellStmt:                         q.updateSpellStmt,
		updateSpellScrollStmt:                   q.updateSpellScrollStmt,
		updateTreasureStmt:                      q.updateTreasureStmt,
		updateUserStmt:                          q.updateUserStmt,
		updateUserPasswordStmt:                  q.updateUserPasswordStmt,
		updateWeaponStmt:                        q.updateWeaponStmt,
		updateWeaponMasteryLevelStmt:            q.updateWeaponMasteryLevelStmt,
	}
}
