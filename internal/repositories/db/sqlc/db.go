// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addInventoryItemStmt, err = db.PrepareContext(ctx, addInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query AddInventoryItem: %w", err)
	}
	if q.createAmmoStmt, err = db.PrepareContext(ctx, createAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAmmo: %w", err)
	}
	if q.createArmorStmt, err = db.PrepareContext(ctx, createArmor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArmor: %w", err)
	}
	if q.createCharacterStmt, err = db.PrepareContext(ctx, createCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCharacter: %w", err)
	}
	if q.createContainerStmt, err = db.PrepareContext(ctx, createContainer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateContainer: %w", err)
	}
	if q.createEquipmentStmt, err = db.PrepareContext(ctx, createEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipment: %w", err)
	}
	if q.createInventoryStmt, err = db.PrepareContext(ctx, createInventory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInventory: %w", err)
	}
	if q.createMagicItemStmt, err = db.PrepareContext(ctx, createMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMagicItem: %w", err)
	}
	if q.createPotionStmt, err = db.PrepareContext(ctx, createPotion); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePotion: %w", err)
	}
	if q.createRingStmt, err = db.PrepareContext(ctx, createRing); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRing: %w", err)
	}
	if q.createShieldStmt, err = db.PrepareContext(ctx, createShield); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShield: %w", err)
	}
	if q.createSpellStmt, err = db.PrepareContext(ctx, createSpell); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSpell: %w", err)
	}
	if q.createSpellScrollStmt, err = db.PrepareContext(ctx, createSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSpellScroll: %w", err)
	}
	if q.createTreasureStmt, err = db.PrepareContext(ctx, createTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTreasure: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWeaponStmt, err = db.PrepareContext(ctx, createWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWeapon: %w", err)
	}
	if q.deleteAmmoStmt, err = db.PrepareContext(ctx, deleteAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAmmo: %w", err)
	}
	if q.deleteArmorStmt, err = db.PrepareContext(ctx, deleteArmor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArmor: %w", err)
	}
	if q.deleteCharacterStmt, err = db.PrepareContext(ctx, deleteCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCharacter: %w", err)
	}
	if q.deleteContainerStmt, err = db.PrepareContext(ctx, deleteContainer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteContainer: %w", err)
	}
	if q.deleteEquipmentStmt, err = db.PrepareContext(ctx, deleteEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipment: %w", err)
	}
	if q.deleteInventoryStmt, err = db.PrepareContext(ctx, deleteInventory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteInventory: %w", err)
	}
	if q.deleteMagicItemStmt, err = db.PrepareContext(ctx, deleteMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMagicItem: %w", err)
	}
	if q.deletePotionStmt, err = db.PrepareContext(ctx, deletePotion); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePotion: %w", err)
	}
	if q.deleteRingStmt, err = db.PrepareContext(ctx, deleteRing); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRing: %w", err)
	}
	if q.deleteShieldStmt, err = db.PrepareContext(ctx, deleteShield); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteShield: %w", err)
	}
	if q.deleteSpellStmt, err = db.PrepareContext(ctx, deleteSpell); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSpell: %w", err)
	}
	if q.deleteSpellScrollStmt, err = db.PrepareContext(ctx, deleteSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSpellScroll: %w", err)
	}
	if q.deleteTreasureStmt, err = db.PrepareContext(ctx, deleteTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTreasure: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWeaponStmt, err = db.PrepareContext(ctx, deleteWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWeapon: %w", err)
	}
	if q.getAmmoStmt, err = db.PrepareContext(ctx, getAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query GetAmmo: %w", err)
	}
	if q.getAmmoByNameStmt, err = db.PrepareContext(ctx, getAmmoByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAmmoByName: %w", err)
	}
	if q.getArmorStmt, err = db.PrepareContext(ctx, getArmor); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmor: %w", err)
	}
	if q.getArmorByNameStmt, err = db.PrepareContext(ctx, getArmorByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetArmorByName: %w", err)
	}
	if q.getCharacterStmt, err = db.PrepareContext(ctx, getCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharacter: %w", err)
	}
	if q.getCharactersByUserStmt, err = db.PrepareContext(ctx, getCharactersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCharactersByUser: %w", err)
	}
	if q.getContainerStmt, err = db.PrepareContext(ctx, getContainer); err != nil {
		return nil, fmt.Errorf("error preparing query GetContainer: %w", err)
	}
	if q.getContainerByNameStmt, err = db.PrepareContext(ctx, getContainerByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetContainerByName: %w", err)
	}
	if q.getEquipmentStmt, err = db.PrepareContext(ctx, getEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipment: %w", err)
	}
	if q.getEquipmentByNameStmt, err = db.PrepareContext(ctx, getEquipmentByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentByName: %w", err)
	}
	if q.getFullUserByEmailStmt, err = db.PrepareContext(ctx, getFullUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetFullUserByEmail: %w", err)
	}
	if q.getInventoryStmt, err = db.PrepareContext(ctx, getInventory); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventory: %w", err)
	}
	if q.getInventoryByCharacterStmt, err = db.PrepareContext(ctx, getInventoryByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryByCharacter: %w", err)
	}
	if q.getInventoryItemStmt, err = db.PrepareContext(ctx, getInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItem: %w", err)
	}
	if q.getInventoryItemByTypeAndItemIDStmt, err = db.PrepareContext(ctx, getInventoryItemByTypeAndItemID); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItemByTypeAndItemID: %w", err)
	}
	if q.getInventoryItemsStmt, err = db.PrepareContext(ctx, getInventoryItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItems: %w", err)
	}
	if q.getInventoryItemsByTypeStmt, err = db.PrepareContext(ctx, getInventoryItemsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetInventoryItemsByType: %w", err)
	}
	if q.getMagicItemStmt, err = db.PrepareContext(ctx, getMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItem: %w", err)
	}
	if q.getMagicItemByNameStmt, err = db.PrepareContext(ctx, getMagicItemByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicItemByName: %w", err)
	}
	if q.getPotionStmt, err = db.PrepareContext(ctx, getPotion); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotion: %w", err)
	}
	if q.getPotionByNameStmt, err = db.PrepareContext(ctx, getPotionByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetPotionByName: %w", err)
	}
	if q.getRingStmt, err = db.PrepareContext(ctx, getRing); err != nil {
		return nil, fmt.Errorf("error preparing query GetRing: %w", err)
	}
	if q.getRingByNameStmt, err = db.PrepareContext(ctx, getRingByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetRingByName: %w", err)
	}
	if q.getShieldStmt, err = db.PrepareContext(ctx, getShield); err != nil {
		return nil, fmt.Errorf("error preparing query GetShield: %w", err)
	}
	if q.getShieldByNameStmt, err = db.PrepareContext(ctx, getShieldByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetShieldByName: %w", err)
	}
	if q.getSpellStmt, err = db.PrepareContext(ctx, getSpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpell: %w", err)
	}
	if q.getSpellScrollStmt, err = db.PrepareContext(ctx, getSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellScroll: %w", err)
	}
	if q.getSpellScrollsBySpellStmt, err = db.PrepareContext(ctx, getSpellScrollsBySpell); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellScrollsBySpell: %w", err)
	}
	if q.getSpellsByCharacterStmt, err = db.PrepareContext(ctx, getSpellsByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetSpellsByCharacter: %w", err)
	}
	if q.getTreasureStmt, err = db.PrepareContext(ctx, getTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query GetTreasure: %w", err)
	}
	if q.getTreasureByCharacterStmt, err = db.PrepareContext(ctx, getTreasureByCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query GetTreasureByCharacter: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWeaponStmt, err = db.PrepareContext(ctx, getWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeapon: %w", err)
	}
	if q.getWeaponByNameStmt, err = db.PrepareContext(ctx, getWeaponByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeaponByName: %w", err)
	}
	if q.listAmmoStmt, err = db.PrepareContext(ctx, listAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query ListAmmo: %w", err)
	}
	if q.listArmorsStmt, err = db.PrepareContext(ctx, listArmors); err != nil {
		return nil, fmt.Errorf("error preparing query ListArmors: %w", err)
	}
	if q.listCharactersStmt, err = db.PrepareContext(ctx, listCharacters); err != nil {
		return nil, fmt.Errorf("error preparing query ListCharacters: %w", err)
	}
	if q.listContainersStmt, err = db.PrepareContext(ctx, listContainers); err != nil {
		return nil, fmt.Errorf("error preparing query ListContainers: %w", err)
	}
	if q.listEquipmentStmt, err = db.PrepareContext(ctx, listEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipment: %w", err)
	}
	if q.listInventoriesStmt, err = db.PrepareContext(ctx, listInventories); err != nil {
		return nil, fmt.Errorf("error preparing query ListInventories: %w", err)
	}
	if q.listMagicItemsStmt, err = db.PrepareContext(ctx, listMagicItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItems: %w", err)
	}
	if q.listMagicItemsByTypeStmt, err = db.PrepareContext(ctx, listMagicItemsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListMagicItemsByType: %w", err)
	}
	if q.listPotionsStmt, err = db.PrepareContext(ctx, listPotions); err != nil {
		return nil, fmt.Errorf("error preparing query ListPotions: %w", err)
	}
	if q.listRingsStmt, err = db.PrepareContext(ctx, listRings); err != nil {
		return nil, fmt.Errorf("error preparing query ListRings: %w", err)
	}
	if q.listShieldsStmt, err = db.PrepareContext(ctx, listShields); err != nil {
		return nil, fmt.Errorf("error preparing query ListShields: %w", err)
	}
	if q.listSpellScrollsStmt, err = db.PrepareContext(ctx, listSpellScrolls); err != nil {
		return nil, fmt.Errorf("error preparing query ListSpellScrolls: %w", err)
	}
	if q.listSpellsStmt, err = db.PrepareContext(ctx, listSpells); err != nil {
		return nil, fmt.Errorf("error preparing query ListSpells: %w", err)
	}
	if q.listTreasuresStmt, err = db.PrepareContext(ctx, listTreasures); err != nil {
		return nil, fmt.Errorf("error preparing query ListTreasures: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listWeaponsStmt, err = db.PrepareContext(ctx, listWeapons); err != nil {
		return nil, fmt.Errorf("error preparing query ListWeapons: %w", err)
	}
	if q.removeAllInventoryItemsStmt, err = db.PrepareContext(ctx, removeAllInventoryItems); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveAllInventoryItems: %w", err)
	}
	if q.removeInventoryItemStmt, err = db.PrepareContext(ctx, removeInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveInventoryItem: %w", err)
	}
	if q.updateAmmoStmt, err = db.PrepareContext(ctx, updateAmmo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAmmo: %w", err)
	}
	if q.updateArmorStmt, err = db.PrepareContext(ctx, updateArmor); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArmor: %w", err)
	}
	if q.updateCharacterStmt, err = db.PrepareContext(ctx, updateCharacter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCharacter: %w", err)
	}
	if q.updateContainerStmt, err = db.PrepareContext(ctx, updateContainer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateContainer: %w", err)
	}
	if q.updateEquipmentStmt, err = db.PrepareContext(ctx, updateEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipment: %w", err)
	}
	if q.updateInventoryStmt, err = db.PrepareContext(ctx, updateInventory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInventory: %w", err)
	}
	if q.updateInventoryItemStmt, err = db.PrepareContext(ctx, updateInventoryItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInventoryItem: %w", err)
	}
	if q.updateMagicItemStmt, err = db.PrepareContext(ctx, updateMagicItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMagicItem: %w", err)
	}
	if q.updatePotionStmt, err = db.PrepareContext(ctx, updatePotion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePotion: %w", err)
	}
	if q.updateRingStmt, err = db.PrepareContext(ctx, updateRing); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRing: %w", err)
	}
	if q.updateShieldStmt, err = db.PrepareContext(ctx, updateShield); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShield: %w", err)
	}
	if q.updateSpellStmt, err = db.PrepareContext(ctx, updateSpell); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSpell: %w", err)
	}
	if q.updateSpellScrollStmt, err = db.PrepareContext(ctx, updateSpellScroll); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSpellScroll: %w", err)
	}
	if q.updateTreasureStmt, err = db.PrepareContext(ctx, updateTreasure); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTreasure: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateWeaponStmt, err = db.PrepareContext(ctx, updateWeapon); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWeapon: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addInventoryItemStmt != nil {
		if cerr := q.addInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addInventoryItemStmt: %w", cerr)
		}
	}
	if q.createAmmoStmt != nil {
		if cerr := q.createAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAmmoStmt: %w", cerr)
		}
	}
	if q.createArmorStmt != nil {
		if cerr := q.createArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArmorStmt: %w", cerr)
		}
	}
	if q.createCharacterStmt != nil {
		if cerr := q.createCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCharacterStmt: %w", cerr)
		}
	}
	if q.createContainerStmt != nil {
		if cerr := q.createContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createContainerStmt: %w", cerr)
		}
	}
	if q.createEquipmentStmt != nil {
		if cerr := q.createEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentStmt: %w", cerr)
		}
	}
	if q.createInventoryStmt != nil {
		if cerr := q.createInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInventoryStmt: %w", cerr)
		}
	}
	if q.createMagicItemStmt != nil {
		if cerr := q.createMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMagicItemStmt: %w", cerr)
		}
	}
	if q.createPotionStmt != nil {
		if cerr := q.createPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPotionStmt: %w", cerr)
		}
	}
	if q.createRingStmt != nil {
		if cerr := q.createRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRingStmt: %w", cerr)
		}
	}
	if q.createShieldStmt != nil {
		if cerr := q.createShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShieldStmt: %w", cerr)
		}
	}
	if q.createSpellStmt != nil {
		if cerr := q.createSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSpellStmt: %w", cerr)
		}
	}
	if q.createSpellScrollStmt != nil {
		if cerr := q.createSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSpellScrollStmt: %w", cerr)
		}
	}
	if q.createTreasureStmt != nil {
		if cerr := q.createTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTreasureStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWeaponStmt != nil {
		if cerr := q.createWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWeaponStmt: %w", cerr)
		}
	}
	if q.deleteAmmoStmt != nil {
		if cerr := q.deleteAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAmmoStmt: %w", cerr)
		}
	}
	if q.deleteArmorStmt != nil {
		if cerr := q.deleteArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArmorStmt: %w", cerr)
		}
	}
	if q.deleteCharacterStmt != nil {
		if cerr := q.deleteCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCharacterStmt: %w", cerr)
		}
	}
	if q.deleteContainerStmt != nil {
		if cerr := q.deleteContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteContainerStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentStmt != nil {
		if cerr := q.deleteEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentStmt: %w", cerr)
		}
	}
	if q.deleteInventoryStmt != nil {
		if cerr := q.deleteInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteInventoryStmt: %w", cerr)
		}
	}
	if q.deleteMagicItemStmt != nil {
		if cerr := q.deleteMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMagicItemStmt: %w", cerr)
		}
	}
	if q.deletePotionStmt != nil {
		if cerr := q.deletePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePotionStmt: %w", cerr)
		}
	}
	if q.deleteRingStmt != nil {
		if cerr := q.deleteRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRingStmt: %w", cerr)
		}
	}
	if q.deleteShieldStmt != nil {
		if cerr := q.deleteShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteShieldStmt: %w", cerr)
		}
	}
	if q.deleteSpellStmt != nil {
		if cerr := q.deleteSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSpellStmt: %w", cerr)
		}
	}
	if q.deleteSpellScrollStmt != nil {
		if cerr := q.deleteSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSpellScrollStmt: %w", cerr)
		}
	}
	if q.deleteTreasureStmt != nil {
		if cerr := q.deleteTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTreasureStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWeaponStmt != nil {
		if cerr := q.deleteWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWeaponStmt: %w", cerr)
		}
	}
	if q.getAmmoStmt != nil {
		if cerr := q.getAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAmmoStmt: %w", cerr)
		}
	}
	if q.getAmmoByNameStmt != nil {
		if cerr := q.getAmmoByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAmmoByNameStmt: %w", cerr)
		}
	}
	if q.getArmorStmt != nil {
		if cerr := q.getArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorStmt: %w", cerr)
		}
	}
	if q.getArmorByNameStmt != nil {
		if cerr := q.getArmorByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArmorByNameStmt: %w", cerr)
		}
	}
	if q.getCharacterStmt != nil {
		if cerr := q.getCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharacterStmt: %w", cerr)
		}
	}
	if q.getCharactersByUserStmt != nil {
		if cerr := q.getCharactersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCharactersByUserStmt: %w", cerr)
		}
	}
	if q.getContainerStmt != nil {
		if cerr := q.getContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContainerStmt: %w", cerr)
		}
	}
	if q.getContainerByNameStmt != nil {
		if cerr := q.getContainerByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContainerByNameStmt: %w", cerr)
		}
	}
	if q.getEquipmentStmt != nil {
		if cerr := q.getEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentStmt: %w", cerr)
		}
	}
	if q.getEquipmentByNameStmt != nil {
		if cerr := q.getEquipmentByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentByNameStmt: %w", cerr)
		}
	}
	if q.getFullUserByEmailStmt != nil {
		if cerr := q.getFullUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFullUserByEmailStmt: %w", cerr)
		}
	}
	if q.getInventoryStmt != nil {
		if cerr := q.getInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryStmt: %w", cerr)
		}
	}
	if q.getInventoryByCharacterStmt != nil {
		if cerr := q.getInventoryByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryByCharacterStmt: %w", cerr)
		}
	}
	if q.getInventoryItemStmt != nil {
		if cerr := q.getInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemStmt: %w", cerr)
		}
	}
	if q.getInventoryItemByTypeAndItemIDStmt != nil {
		if cerr := q.getInventoryItemByTypeAndItemIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemByTypeAndItemIDStmt: %w", cerr)
		}
	}
	if q.getInventoryItemsStmt != nil {
		if cerr := q.getInventoryItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemsStmt: %w", cerr)
		}
	}
	if q.getInventoryItemsByTypeStmt != nil {
		if cerr := q.getInventoryItemsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInventoryItemsByTypeStmt: %w", cerr)
		}
	}
	if q.getMagicItemStmt != nil {
		if cerr := q.getMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemStmt: %w", cerr)
		}
	}
	if q.getMagicItemByNameStmt != nil {
		if cerr := q.getMagicItemByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicItemByNameStmt: %w", cerr)
		}
	}
	if q.getPotionStmt != nil {
		if cerr := q.getPotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionStmt: %w", cerr)
		}
	}
	if q.getPotionByNameStmt != nil {
		if cerr := q.getPotionByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPotionByNameStmt: %w", cerr)
		}
	}
	if q.getRingStmt != nil {
		if cerr := q.getRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRingStmt: %w", cerr)
		}
	}
	if q.getRingByNameStmt != nil {
		if cerr := q.getRingByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRingByNameStmt: %w", cerr)
		}
	}
	if q.getShieldStmt != nil {
		if cerr := q.getShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldStmt: %w", cerr)
		}
	}
	if q.getShieldByNameStmt != nil {
		if cerr := q.getShieldByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShieldByNameStmt: %w", cerr)
		}
	}
	if q.getSpellStmt != nil {
		if cerr := q.getSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellStmt: %w", cerr)
		}
	}
	if q.getSpellScrollStmt != nil {
		if cerr := q.getSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellScrollStmt: %w", cerr)
		}
	}
	if q.getSpellScrollsBySpellStmt != nil {
		if cerr := q.getSpellScrollsBySpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellScrollsBySpellStmt: %w", cerr)
		}
	}
	if q.getSpellsByCharacterStmt != nil {
		if cerr := q.getSpellsByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSpellsByCharacterStmt: %w", cerr)
		}
	}
	if q.getTreasureStmt != nil {
		if cerr := q.getTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTreasureStmt: %w", cerr)
		}
	}
	if q.getTreasureByCharacterStmt != nil {
		if cerr := q.getTreasureByCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTreasureByCharacterStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWeaponStmt != nil {
		if cerr := q.getWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponStmt: %w", cerr)
		}
	}
	if q.getWeaponByNameStmt != nil {
		if cerr := q.getWeaponByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeaponByNameStmt: %w", cerr)
		}
	}
	if q.listAmmoStmt != nil {
		if cerr := q.listAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAmmoStmt: %w", cerr)
		}
	}
	if q.listArmorsStmt != nil {
		if cerr := q.listArmorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listArmorsStmt: %w", cerr)
		}
	}
	if q.listCharactersStmt != nil {
		if cerr := q.listCharactersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCharactersStmt: %w", cerr)
		}
	}
	if q.listContainersStmt != nil {
		if cerr := q.listContainersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listContainersStmt: %w", cerr)
		}
	}
	if q.listEquipmentStmt != nil {
		if cerr := q.listEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentStmt: %w", cerr)
		}
	}
	if q.listInventoriesStmt != nil {
		if cerr := q.listInventoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listInventoriesStmt: %w", cerr)
		}
	}
	if q.listMagicItemsStmt != nil {
		if cerr := q.listMagicItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsStmt: %w", cerr)
		}
	}
	if q.listMagicItemsByTypeStmt != nil {
		if cerr := q.listMagicItemsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMagicItemsByTypeStmt: %w", cerr)
		}
	}
	if q.listPotionsStmt != nil {
		if cerr := q.listPotionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPotionsStmt: %w", cerr)
		}
	}
	if q.listRingsStmt != nil {
		if cerr := q.listRingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRingsStmt: %w", cerr)
		}
	}
	if q.listShieldsStmt != nil {
		if cerr := q.listShieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listShieldsStmt: %w", cerr)
		}
	}
	if q.listSpellScrollsStmt != nil {
		if cerr := q.listSpellScrollsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSpellScrollsStmt: %w", cerr)
		}
	}
	if q.listSpellsStmt != nil {
		if cerr := q.listSpellsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSpellsStmt: %w", cerr)
		}
	}
	if q.listTreasuresStmt != nil {
		if cerr := q.listTreasuresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTreasuresStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listWeaponsStmt != nil {
		if cerr := q.listWeaponsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWeaponsStmt: %w", cerr)
		}
	}
	if q.removeAllInventoryItemsStmt != nil {
		if cerr := q.removeAllInventoryItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeAllInventoryItemsStmt: %w", cerr)
		}
	}
	if q.removeInventoryItemStmt != nil {
		if cerr := q.removeInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeInventoryItemStmt: %w", cerr)
		}
	}
	if q.updateAmmoStmt != nil {
		if cerr := q.updateAmmoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAmmoStmt: %w", cerr)
		}
	}
	if q.updateArmorStmt != nil {
		if cerr := q.updateArmorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArmorStmt: %w", cerr)
		}
	}
	if q.updateCharacterStmt != nil {
		if cerr := q.updateCharacterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCharacterStmt: %w", cerr)
		}
	}
	if q.updateContainerStmt != nil {
		if cerr := q.updateContainerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateContainerStmt: %w", cerr)
		}
	}
	if q.updateEquipmentStmt != nil {
		if cerr := q.updateEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentStmt: %w", cerr)
		}
	}
	if q.updateInventoryStmt != nil {
		if cerr := q.updateInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInventoryStmt: %w", cerr)
		}
	}
	if q.updateInventoryItemStmt != nil {
		if cerr := q.updateInventoryItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInventoryItemStmt: %w", cerr)
		}
	}
	if q.updateMagicItemStmt != nil {
		if cerr := q.updateMagicItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMagicItemStmt: %w", cerr)
		}
	}
	if q.updatePotionStmt != nil {
		if cerr := q.updatePotionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePotionStmt: %w", cerr)
		}
	}
	if q.updateRingStmt != nil {
		if cerr := q.updateRingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRingStmt: %w", cerr)
		}
	}
	if q.updateShieldStmt != nil {
		if cerr := q.updateShieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShieldStmt: %w", cerr)
		}
	}
	if q.updateSpellStmt != nil {
		if cerr := q.updateSpellStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSpellStmt: %w", cerr)
		}
	}
	if q.updateSpellScrollStmt != nil {
		if cerr := q.updateSpellScrollStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSpellScrollStmt: %w", cerr)
		}
	}
	if q.updateTreasureStmt != nil {
		if cerr := q.updateTreasureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTreasureStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateWeaponStmt != nil {
		if cerr := q.updateWeaponStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWeaponStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	addInventoryItemStmt                *sql.Stmt
	createAmmoStmt                      *sql.Stmt
	createArmorStmt                     *sql.Stmt
	createCharacterStmt                 *sql.Stmt
	createContainerStmt                 *sql.Stmt
	createEquipmentStmt                 *sql.Stmt
	createInventoryStmt                 *sql.Stmt
	createMagicItemStmt                 *sql.Stmt
	createPotionStmt                    *sql.Stmt
	createRingStmt                      *sql.Stmt
	createShieldStmt                    *sql.Stmt
	createSpellStmt                     *sql.Stmt
	createSpellScrollStmt               *sql.Stmt
	createTreasureStmt                  *sql.Stmt
	createUserStmt                      *sql.Stmt
	createWeaponStmt                    *sql.Stmt
	deleteAmmoStmt                      *sql.Stmt
	deleteArmorStmt                     *sql.Stmt
	deleteCharacterStmt                 *sql.Stmt
	deleteContainerStmt                 *sql.Stmt
	deleteEquipmentStmt                 *sql.Stmt
	deleteInventoryStmt                 *sql.Stmt
	deleteMagicItemStmt                 *sql.Stmt
	deletePotionStmt                    *sql.Stmt
	deleteRingStmt                      *sql.Stmt
	deleteShieldStmt                    *sql.Stmt
	deleteSpellStmt                     *sql.Stmt
	deleteSpellScrollStmt               *sql.Stmt
	deleteTreasureStmt                  *sql.Stmt
	deleteUserStmt                      *sql.Stmt
	deleteWeaponStmt                    *sql.Stmt
	getAmmoStmt                         *sql.Stmt
	getAmmoByNameStmt                   *sql.Stmt
	getArmorStmt                        *sql.Stmt
	getArmorByNameStmt                  *sql.Stmt
	getCharacterStmt                    *sql.Stmt
	getCharactersByUserStmt             *sql.Stmt
	getContainerStmt                    *sql.Stmt
	getContainerByNameStmt              *sql.Stmt
	getEquipmentStmt                    *sql.Stmt
	getEquipmentByNameStmt              *sql.Stmt
	getFullUserByEmailStmt              *sql.Stmt
	getInventoryStmt                    *sql.Stmt
	getInventoryByCharacterStmt         *sql.Stmt
	getInventoryItemStmt                *sql.Stmt
	getInventoryItemByTypeAndItemIDStmt *sql.Stmt
	getInventoryItemsStmt               *sql.Stmt
	getInventoryItemsByTypeStmt         *sql.Stmt
	getMagicItemStmt                    *sql.Stmt
	getMagicItemByNameStmt              *sql.Stmt
	getPotionStmt                       *sql.Stmt
	getPotionByNameStmt                 *sql.Stmt
	getRingStmt                         *sql.Stmt
	getRingByNameStmt                   *sql.Stmt
	getShieldStmt                       *sql.Stmt
	getShieldByNameStmt                 *sql.Stmt
	getSpellStmt                        *sql.Stmt
	getSpellScrollStmt                  *sql.Stmt
	getSpellScrollsBySpellStmt          *sql.Stmt
	getSpellsByCharacterStmt            *sql.Stmt
	getTreasureStmt                     *sql.Stmt
	getTreasureByCharacterStmt          *sql.Stmt
	getUserStmt                         *sql.Stmt
	getWeaponStmt                       *sql.Stmt
	getWeaponByNameStmt                 *sql.Stmt
	listAmmoStmt                        *sql.Stmt
	listArmorsStmt                      *sql.Stmt
	listCharactersStmt                  *sql.Stmt
	listContainersStmt                  *sql.Stmt
	listEquipmentStmt                   *sql.Stmt
	listInventoriesStmt                 *sql.Stmt
	listMagicItemsStmt                  *sql.Stmt
	listMagicItemsByTypeStmt            *sql.Stmt
	listPotionsStmt                     *sql.Stmt
	listRingsStmt                       *sql.Stmt
	listShieldsStmt                     *sql.Stmt
	listSpellScrollsStmt                *sql.Stmt
	listSpellsStmt                      *sql.Stmt
	listTreasuresStmt                   *sql.Stmt
	listUsersStmt                       *sql.Stmt
	listWeaponsStmt                     *sql.Stmt
	removeAllInventoryItemsStmt         *sql.Stmt
	removeInventoryItemStmt             *sql.Stmt
	updateAmmoStmt                      *sql.Stmt
	updateArmorStmt                     *sql.Stmt
	updateCharacterStmt                 *sql.Stmt
	updateContainerStmt                 *sql.Stmt
	updateEquipmentStmt                 *sql.Stmt
	updateInventoryStmt                 *sql.Stmt
	updateInventoryItemStmt             *sql.Stmt
	updateMagicItemStmt                 *sql.Stmt
	updatePotionStmt                    *sql.Stmt
	updateRingStmt                      *sql.Stmt
	updateShieldStmt                    *sql.Stmt
	updateSpellStmt                     *sql.Stmt
	updateSpellScrollStmt               *sql.Stmt
	updateTreasureStmt                  *sql.Stmt
	updateUserStmt                      *sql.Stmt
	updateWeaponStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		addInventoryItemStmt:                q.addInventoryItemStmt,
		createAmmoStmt:                      q.createAmmoStmt,
		createArmorStmt:                     q.createArmorStmt,
		createCharacterStmt:                 q.createCharacterStmt,
		createContainerStmt:                 q.createContainerStmt,
		createEquipmentStmt:                 q.createEquipmentStmt,
		createInventoryStmt:                 q.createInventoryStmt,
		createMagicItemStmt:                 q.createMagicItemStmt,
		createPotionStmt:                    q.createPotionStmt,
		createRingStmt:                      q.createRingStmt,
		createShieldStmt:                    q.createShieldStmt,
		createSpellStmt:                     q.createSpellStmt,
		createSpellScrollStmt:               q.createSpellScrollStmt,
		createTreasureStmt:                  q.createTreasureStmt,
		createUserStmt:                      q.createUserStmt,
		createWeaponStmt:                    q.createWeaponStmt,
		deleteAmmoStmt:                      q.deleteAmmoStmt,
		deleteArmorStmt:                     q.deleteArmorStmt,
		deleteCharacterStmt:                 q.deleteCharacterStmt,
		deleteContainerStmt:                 q.deleteContainerStmt,
		deleteEquipmentStmt:                 q.deleteEquipmentStmt,
		deleteInventoryStmt:                 q.deleteInventoryStmt,
		deleteMagicItemStmt:                 q.deleteMagicItemStmt,
		deletePotionStmt:                    q.deletePotionStmt,
		deleteRingStmt:                      q.deleteRingStmt,
		deleteShieldStmt:                    q.deleteShieldStmt,
		deleteSpellStmt:                     q.deleteSpellStmt,
		deleteSpellScrollStmt:               q.deleteSpellScrollStmt,
		deleteTreasureStmt:                  q.deleteTreasureStmt,
		deleteUserStmt:                      q.deleteUserStmt,
		deleteWeaponStmt:                    q.deleteWeaponStmt,
		getAmmoStmt:                         q.getAmmoStmt,
		getAmmoByNameStmt:                   q.getAmmoByNameStmt,
		getArmorStmt:                        q.getArmorStmt,
		getArmorByNameStmt:                  q.getArmorByNameStmt,
		getCharacterStmt:                    q.getCharacterStmt,
		getCharactersByUserStmt:             q.getCharactersByUserStmt,
		getContainerStmt:                    q.getContainerStmt,
		getContainerByNameStmt:              q.getContainerByNameStmt,
		getEquipmentStmt:                    q.getEquipmentStmt,
		getEquipmentByNameStmt:              q.getEquipmentByNameStmt,
		getFullUserByEmailStmt:              q.getFullUserByEmailStmt,
		getInventoryStmt:                    q.getInventoryStmt,
		getInventoryByCharacterStmt:         q.getInventoryByCharacterStmt,
		getInventoryItemStmt:                q.getInventoryItemStmt,
		getInventoryItemByTypeAndItemIDStmt: q.getInventoryItemByTypeAndItemIDStmt,
		getInventoryItemsStmt:               q.getInventoryItemsStmt,
		getInventoryItemsByTypeStmt:         q.getInventoryItemsByTypeStmt,
		getMagicItemStmt:                    q.getMagicItemStmt,
		getMagicItemByNameStmt:              q.getMagicItemByNameStmt,
		getPotionStmt:                       q.getPotionStmt,
		getPotionByNameStmt:                 q.getPotionByNameStmt,
		getRingStmt:                         q.getRingStmt,
		getRingByNameStmt:                   q.getRingByNameStmt,
		getShieldStmt:                       q.getShieldStmt,
		getShieldByNameStmt:                 q.getShieldByNameStmt,
		getSpellStmt:                        q.getSpellStmt,
		getSpellScrollStmt:                  q.getSpellScrollStmt,
		getSpellScrollsBySpellStmt:          q.getSpellScrollsBySpellStmt,
		getSpellsByCharacterStmt:            q.getSpellsByCharacterStmt,
		getTreasureStmt:                     q.getTreasureStmt,
		getTreasureByCharacterStmt:          q.getTreasureByCharacterStmt,
		getUserStmt:                         q.getUserStmt,
		getWeaponStmt:                       q.getWeaponStmt,
		getWeaponByNameStmt:                 q.getWeaponByNameStmt,
		listAmmoStmt:                        q.listAmmoStmt,
		listArmorsStmt:                      q.listArmorsStmt,
		listCharactersStmt:                  q.listCharactersStmt,
		listContainersStmt:                  q.listContainersStmt,
		listEquipmentStmt:                   q.listEquipmentStmt,
		listInventoriesStmt:                 q.listInventoriesStmt,
		listMagicItemsStmt:                  q.listMagicItemsStmt,
		listMagicItemsByTypeStmt:            q.listMagicItemsByTypeStmt,
		listPotionsStmt:                     q.listPotionsStmt,
		listRingsStmt:                       q.listRingsStmt,
		listShieldsStmt:                     q.listShieldsStmt,
		listSpellScrollsStmt:                q.listSpellScrollsStmt,
		listSpellsStmt:                      q.listSpellsStmt,
		listTreasuresStmt:                   q.listTreasuresStmt,
		listUsersStmt:                       q.listUsersStmt,
		listWeaponsStmt:                     q.listWeaponsStmt,
		removeAllInventoryItemsStmt:         q.removeAllInventoryItemsStmt,
		removeInventoryItemStmt:             q.removeInventoryItemStmt,
		updateAmmoStmt:                      q.updateAmmoStmt,
		updateArmorStmt:                     q.updateArmorStmt,
		updateCharacterStmt:                 q.updateCharacterStmt,
		updateContainerStmt:                 q.updateContainerStmt,
		updateEquipmentStmt:                 q.updateEquipmentStmt,
		updateInventoryStmt:                 q.updateInventoryStmt,
		updateInventoryItemStmt:             q.updateInventoryItemStmt,
		updateMagicItemStmt:                 q.updateMagicItemStmt,
		updatePotionStmt:                    q.updatePotionStmt,
		updateRingStmt:                      q.updateRingStmt,
		updateShieldStmt:                    q.updateShieldStmt,
		updateSpellStmt:                     q.updateSpellStmt,
		updateSpellScrollStmt:               q.updateSpellScrollStmt,
		updateTreasureStmt:                  q.updateTreasureStmt,
		updateUserStmt:                      q.updateUserStmt,
		updateWeaponStmt:                    q.updateWeaponStmt,
	}
}
