// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: magic_items.sql

package db

import (
	"context"
	"database/sql"
)

const createMagicItem = `-- name: CreateMagicItem :execresult
INSERT INTO magic_items (
  name, item_type, description, charges, cost, weight
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateMagicItemParams struct {
	Name        string
	ItemType    string
	Description string
	Charges     sql.NullInt64
	Cost        float64
	Weight      int64
}

func (q *Queries) CreateMagicItem(ctx context.Context, arg CreateMagicItemParams) (sql.Result, error) {
	return q.exec(ctx, q.createMagicItemStmt, createMagicItem,
		arg.Name,
		arg.ItemType,
		arg.Description,
		arg.Charges,
		arg.Cost,
		arg.Weight,
	)
}

const deleteMagicItem = `-- name: DeleteMagicItem :execresult
DELETE FROM magic_items
WHERE id = ?
`

func (q *Queries) DeleteMagicItem(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteMagicItemStmt, deleteMagicItem, id)
}

const getMagicItem = `-- name: GetMagicItem :one
SELECT id, name, item_type, description, charges, cost, weight, created_at, updated_at FROM magic_items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMagicItem(ctx context.Context, id int64) (MagicItem, error) {
	row := q.queryRow(ctx, q.getMagicItemStmt, getMagicItem, id)
	var i MagicItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ItemType,
		&i.Description,
		&i.Charges,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMagicItemByName = `-- name: GetMagicItemByName :one
SELECT id, name, item_type, description, charges, cost, weight, created_at, updated_at FROM magic_items
WHERE name = ? LIMIT 1
`

func (q *Queries) GetMagicItemByName(ctx context.Context, name string) (MagicItem, error) {
	row := q.queryRow(ctx, q.getMagicItemByNameStmt, getMagicItemByName, name)
	var i MagicItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ItemType,
		&i.Description,
		&i.Charges,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMagicItems = `-- name: ListMagicItems :many
SELECT id, name, item_type, description, charges, cost, weight, created_at, updated_at FROM magic_items
ORDER BY name
`

func (q *Queries) ListMagicItems(ctx context.Context) ([]MagicItem, error) {
	rows, err := q.query(ctx, q.listMagicItemsStmt, listMagicItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MagicItem{}
	for rows.Next() {
		var i MagicItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ItemType,
			&i.Description,
			&i.Charges,
			&i.Cost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMagicItemsByType = `-- name: ListMagicItemsByType :many
SELECT id, name, item_type, description, charges, cost, weight, created_at, updated_at FROM magic_items
WHERE item_type = ?
ORDER BY name
`

func (q *Queries) ListMagicItemsByType(ctx context.Context, itemType string) ([]MagicItem, error) {
	rows, err := q.query(ctx, q.listMagicItemsByTypeStmt, listMagicItemsByType, itemType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MagicItem{}
	for rows.Next() {
		var i MagicItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ItemType,
			&i.Description,
			&i.Charges,
			&i.Cost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMagicItem = `-- name: UpdateMagicItem :execresult
UPDATE magic_items
SET name = ?,
    item_type = ?,
    description = ?,
    charges = ?,
    cost = ?,
    weight = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateMagicItemParams struct {
	Name        string
	ItemType    string
	Description string
	Charges     sql.NullInt64
	Cost        float64
	Weight      int64
	ID          int64
}

func (q *Queries) UpdateMagicItem(ctx context.Context, arg UpdateMagicItemParams) (sql.Result, error) {
	return q.exec(ctx, q.updateMagicItemStmt, updateMagicItem,
		arg.Name,
		arg.ItemType,
		arg.Description,
		arg.Charges,
		arg.Cost,
		arg.Weight,
		arg.ID,
	)
}
