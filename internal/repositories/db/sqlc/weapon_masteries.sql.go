// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: weapon_masteries.sql

package db

import (
	"context"
)

const addWeaponMastery = `-- name: AddWeaponMastery :exec
INSERT INTO weapon_masteries (character_id, weapon_base_name, mastery_level)
VALUES (?, ?, ?)
`

type AddWeaponMasteryParams struct {
	CharacterID    int64
	WeaponBaseName string
	MasteryLevel   string
}

func (q *Queries) AddWeaponMastery(ctx context.Context, arg AddWeaponMasteryParams) error {
	_, err := q.exec(ctx, q.addWeaponMasteryStmt, addWeaponMastery, arg.CharacterID, arg.WeaponBaseName, arg.MasteryLevel)
	return err
}

const countWeaponMasteries = `-- name: CountWeaponMasteries :one
SELECT COUNT(*) as count 
FROM weapon_masteries 
WHERE character_id = ? AND mastery_level = ?
`

type CountWeaponMasteriesParams struct {
	CharacterID  int64
	MasteryLevel string
}

func (q *Queries) CountWeaponMasteries(ctx context.Context, arg CountWeaponMasteriesParams) (int64, error) {
	row := q.queryRow(ctx, q.countWeaponMasteriesStmt, countWeaponMasteries, arg.CharacterID, arg.MasteryLevel)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteWeaponMastery = `-- name: DeleteWeaponMastery :exec
DELETE FROM weapon_masteries
WHERE character_id = ? AND weapon_base_name = ?
`

type DeleteWeaponMasteryParams struct {
	CharacterID    int64
	WeaponBaseName string
}

func (q *Queries) DeleteWeaponMastery(ctx context.Context, arg DeleteWeaponMasteryParams) error {
	_, err := q.exec(ctx, q.deleteWeaponMasteryStmt, deleteWeaponMastery, arg.CharacterID, arg.WeaponBaseName)
	return err
}

const getWeaponMasteriesByCharacter = `-- name: GetWeaponMasteriesByCharacter :many
SELECT wm.id, wm.character_id, wm.weapon_base_name, wm.mastery_level, wm.created_at, wm.updated_at
FROM weapon_masteries wm
WHERE wm.character_id = ? 
ORDER BY wm.mastery_level DESC, wm.weapon_base_name ASC
`

func (q *Queries) GetWeaponMasteriesByCharacter(ctx context.Context, characterID int64) ([]WeaponMastery, error) {
	rows, err := q.query(ctx, q.getWeaponMasteriesByCharacterStmt, getWeaponMasteriesByCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeaponMastery{}
	for rows.Next() {
		var i WeaponMastery
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.WeaponBaseName,
			&i.MasteryLevel,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeaponMasteryByBaseName = `-- name: GetWeaponMasteryByBaseName :one
SELECT id, character_id, weapon_base_name, mastery_level, created_at, updated_at
FROM weapon_masteries
WHERE character_id = ? AND weapon_base_name = ?
`

type GetWeaponMasteryByBaseNameParams struct {
	CharacterID    int64
	WeaponBaseName string
}

func (q *Queries) GetWeaponMasteryByBaseName(ctx context.Context, arg GetWeaponMasteryByBaseNameParams) (WeaponMastery, error) {
	row := q.queryRow(ctx, q.getWeaponMasteryByBaseNameStmt, getWeaponMasteryByBaseName, arg.CharacterID, arg.WeaponBaseName)
	var i WeaponMastery
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponBaseName,
		&i.MasteryLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWeaponMasteryByID = `-- name: GetWeaponMasteryByID :one
SELECT id, character_id, weapon_base_name, mastery_level, created_at, updated_at
FROM weapon_masteries
WHERE id = ?
`

func (q *Queries) GetWeaponMasteryByID(ctx context.Context, id int64) (WeaponMastery, error) {
	row := q.queryRow(ctx, q.getWeaponMasteryByIDStmt, getWeaponMasteryByID, id)
	var i WeaponMastery
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponBaseName,
		&i.MasteryLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWeaponMasteryLevel = `-- name: UpdateWeaponMasteryLevel :exec
UPDATE weapon_masteries
SET mastery_level = ?, updated_at = CURRENT_TIMESTAMP
WHERE character_id = ? AND weapon_base_name = ?
`

type UpdateWeaponMasteryLevelParams struct {
	MasteryLevel   string
	CharacterID    int64
	WeaponBaseName string
}

func (q *Queries) UpdateWeaponMasteryLevel(ctx context.Context, arg UpdateWeaponMasteryLevelParams) error {
	_, err := q.exec(ctx, q.updateWeaponMasteryLevelStmt, updateWeaponMasteryLevel, arg.MasteryLevel, arg.CharacterID, arg.WeaponBaseName)
	return err
}
