// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rings.sql

package db

import (
	"context"
	"database/sql"
)

const createRing = `-- name: CreateRing :execresult
INSERT INTO rings (
  name, description, cost, weight
) VALUES (
  ?, ?, ?, ?
)
`

type CreateRingParams struct {
	Name        string
	Description string
	Cost        float64
	Weight      int64
}

func (q *Queries) CreateRing(ctx context.Context, arg CreateRingParams) (sql.Result, error) {
	return q.exec(ctx, q.createRingStmt, createRing,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Weight,
	)
}

const deleteRing = `-- name: DeleteRing :execresult
DELETE FROM rings
WHERE id = ?
`

func (q *Queries) DeleteRing(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteRingStmt, deleteRing, id)
}

const getRing = `-- name: GetRing :one
SELECT id, name, description, cost, weight, created_at, updated_at FROM rings
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRing(ctx context.Context, id int64) (Ring, error) {
	row := q.queryRow(ctx, q.getRingStmt, getRing, id)
	var i Ring
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRingByName = `-- name: GetRingByName :one
SELECT id, name, description, cost, weight, created_at, updated_at FROM rings
WHERE name = ? LIMIT 1
`

func (q *Queries) GetRingByName(ctx context.Context, name string) (Ring, error) {
	row := q.queryRow(ctx, q.getRingByNameStmt, getRingByName, name)
	var i Ring
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRings = `-- name: ListRings :many
SELECT id, name, description, cost, weight, created_at, updated_at FROM rings
ORDER BY name
`

func (q *Queries) ListRings(ctx context.Context) ([]Ring, error) {
	rows, err := q.query(ctx, q.listRingsStmt, listRings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ring{}
	for rows.Next() {
		var i Ring
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Cost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRing = `-- name: UpdateRing :execresult
UPDATE rings
SET name = ?,
    description = ?,
    cost = ?,
    weight = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateRingParams struct {
	Name        string
	Description string
	Cost        float64
	Weight      int64
	ID          int64
}

func (q *Queries) UpdateRing(ctx context.Context, arg UpdateRingParams) (sql.Result, error) {
	return q.exec(ctx, q.updateRingStmt, updateRing,
		arg.Name,
		arg.Description,
		arg.Cost,
		arg.Weight,
		arg.ID,
	)
}
