// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: armor.sql

package db

import (
	"context"
	"database/sql"
)

const createArmor = `-- name: CreateArmor :execresult
INSERT INTO armors (
  name, armor_type, ac, cost,
  damage_reduction, weight, weight_class, movement_rate
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateArmorParams struct {
	Name            string
	ArmorType       string
	Ac              int64
	Cost            float64
	DamageReduction int64
	Weight          int64
	WeightClass     string
	MovementRate    int64
}

func (q *Queries) CreateArmor(ctx context.Context, arg CreateArmorParams) (sql.Result, error) {
	return q.exec(ctx, q.createArmorStmt, createArmor,
		arg.Name,
		arg.ArmorType,
		arg.Ac,
		arg.Cost,
		arg.DamageReduction,
		arg.Weight,
		arg.WeightClass,
		arg.MovementRate,
	)
}

const deleteArmor = `-- name: DeleteArmor :execresult
DELETE FROM armors
WHERE id = ?
`

func (q *Queries) DeleteArmor(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteArmorStmt, deleteArmor, id)
}

const getArmor = `-- name: GetArmor :one
SELECT id, name, armor_type, ac, cost, damage_reduction, weight, weight_class, movement_rate, created_at, updated_at FROM armors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetArmor(ctx context.Context, id int64) (Armor, error) {
	row := q.queryRow(ctx, q.getArmorStmt, getArmor, id)
	var i Armor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ArmorType,
		&i.Ac,
		&i.Cost,
		&i.DamageReduction,
		&i.Weight,
		&i.WeightClass,
		&i.MovementRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArmorByName = `-- name: GetArmorByName :one
SELECT id, name, armor_type, ac, cost, damage_reduction, weight, weight_class, movement_rate, created_at, updated_at FROM armors
WHERE name = ? LIMIT 1
`

func (q *Queries) GetArmorByName(ctx context.Context, name string) (Armor, error) {
	row := q.queryRow(ctx, q.getArmorByNameStmt, getArmorByName, name)
	var i Armor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ArmorType,
		&i.Ac,
		&i.Cost,
		&i.DamageReduction,
		&i.Weight,
		&i.WeightClass,
		&i.MovementRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArmors = `-- name: ListArmors :many
SELECT id, name, armor_type, ac, cost, damage_reduction, weight, weight_class, movement_rate, created_at, updated_at FROM armors
ORDER BY name
`

func (q *Queries) ListArmors(ctx context.Context) ([]Armor, error) {
	rows, err := q.query(ctx, q.listArmorsStmt, listArmors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Armor{}
	for rows.Next() {
		var i Armor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ArmorType,
			&i.Ac,
			&i.Cost,
			&i.DamageReduction,
			&i.Weight,
			&i.WeightClass,
			&i.MovementRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArmor = `-- name: UpdateArmor :execresult
UPDATE armors
SET name = ?,
    armor_type = ?,
    ac = ?,
    cost = ?,
    damage_reduction = ?,
    weight = ?,
    weight_class = ?,
    movement_rate = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateArmorParams struct {
	Name            string
	ArmorType       string
	Ac              int64
	Cost            float64
	DamageReduction int64
	Weight          int64
	WeightClass     string
	MovementRate    int64
	ID              int64
}

func (q *Queries) UpdateArmor(ctx context.Context, arg UpdateArmorParams) (sql.Result, error) {
	return q.exec(ctx, q.updateArmorStmt, updateArmor,
		arg.Name,
		arg.ArmorType,
		arg.Ac,
		arg.Cost,
		arg.DamageReduction,
		arg.Weight,
		arg.WeightClass,
		arg.MovementRate,
		arg.ID,
	)
}
