// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ammo.sql

package db

import (
	"context"
	"database/sql"
)

const createAmmo = `-- name: CreateAmmo :execresult
INSERT INTO ammo (
  name, cost, weight
) VALUES (
  ?, ?, ?
)
`

type CreateAmmoParams struct {
	Name   string
	Cost   float64
	Weight int64
}

func (q *Queries) CreateAmmo(ctx context.Context, arg CreateAmmoParams) (sql.Result, error) {
	return q.exec(ctx, q.createAmmoStmt, createAmmo, arg.Name, arg.Cost, arg.Weight)
}

const deleteAmmo = `-- name: DeleteAmmo :execresult
DELETE FROM ammo
WHERE id = ?
`

func (q *Queries) DeleteAmmo(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteAmmoStmt, deleteAmmo, id)
}

const getAmmo = `-- name: GetAmmo :one
SELECT id, name, cost, weight, created_at, updated_at FROM ammo
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAmmo(ctx context.Context, id int64) (Ammo, error) {
	row := q.queryRow(ctx, q.getAmmoStmt, getAmmo, id)
	var i Ammo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAmmoByName = `-- name: GetAmmoByName :one
SELECT id, name, cost, weight, created_at, updated_at FROM ammo
WHERE name = ? LIMIT 1
`

func (q *Queries) GetAmmoByName(ctx context.Context, name string) (Ammo, error) {
	row := q.queryRow(ctx, q.getAmmoByNameStmt, getAmmoByName, name)
	var i Ammo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAmmo = `-- name: ListAmmo :many
SELECT id, name, cost, weight, created_at, updated_at FROM ammo
ORDER BY name
`

func (q *Queries) ListAmmo(ctx context.Context) ([]Ammo, error) {
	rows, err := q.query(ctx, q.listAmmoStmt, listAmmo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ammo{}
	for rows.Next() {
		var i Ammo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAmmo = `-- name: UpdateAmmo :execresult
UPDATE ammo
SET name = ?,
    cost = ?,
    weight = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateAmmoParams struct {
	Name   string
	Cost   float64
	Weight int64
	ID     int64
}

func (q *Queries) UpdateAmmo(ctx context.Context, arg UpdateAmmoParams) (sql.Result, error) {
	return q.exec(ctx, q.updateAmmoStmt, updateAmmo,
		arg.Name,
		arg.Cost,
		arg.Weight,
		arg.ID,
	)
}
