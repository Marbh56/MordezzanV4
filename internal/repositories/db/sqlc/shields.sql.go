// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shields.sql

package db

import (
	"context"
	"database/sql"
)

const createShield = `-- name: CreateShield :execresult
INSERT INTO shields (
  name, cost, weight, defense_modifier
) VALUES (
  ?, ?, ?, ?
)
`

type CreateShieldParams struct {
	Name            string
	Cost            float64
	Weight          int64
	DefenseModifier int64
}

func (q *Queries) CreateShield(ctx context.Context, arg CreateShieldParams) (sql.Result, error) {
	return q.exec(ctx, q.createShieldStmt, createShield,
		arg.Name,
		arg.Cost,
		arg.Weight,
		arg.DefenseModifier,
	)
}

const deleteShield = `-- name: DeleteShield :execresult
DELETE FROM shields
WHERE id = ?
`

func (q *Queries) DeleteShield(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteShieldStmt, deleteShield, id)
}

const getShield = `-- name: GetShield :one
SELECT id, name, cost, weight, defense_modifier, created_at, updated_at FROM shields
WHERE id = ? LIMIT 1
`

func (q *Queries) GetShield(ctx context.Context, id int64) (Shield, error) {
	row := q.queryRow(ctx, q.getShieldStmt, getShield, id)
	var i Shield
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Weight,
		&i.DefenseModifier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShieldByName = `-- name: GetShieldByName :one
SELECT id, name, cost, weight, defense_modifier, created_at, updated_at FROM shields
WHERE name = ? LIMIT 1
`

func (q *Queries) GetShieldByName(ctx context.Context, name string) (Shield, error) {
	row := q.queryRow(ctx, q.getShieldByNameStmt, getShieldByName, name)
	var i Shield
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Weight,
		&i.DefenseModifier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShields = `-- name: ListShields :many
SELECT id, name, cost, weight, defense_modifier, created_at, updated_at FROM shields
ORDER BY name
`

func (q *Queries) ListShields(ctx context.Context) ([]Shield, error) {
	rows, err := q.query(ctx, q.listShieldsStmt, listShields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shield{}
	for rows.Next() {
		var i Shield
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Weight,
			&i.DefenseModifier,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShield = `-- name: UpdateShield :execresult
UPDATE shields
SET name = ?,
    cost = ?,
    weight = ?,
    defense_modifier = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateShieldParams struct {
	Name            string
	Cost            float64
	Weight          int64
	DefenseModifier int64
	ID              int64
}

func (q *Queries) UpdateShield(ctx context.Context, arg UpdateShieldParams) (sql.Result, error) {
	return q.exec(ctx, q.updateShieldStmt, updateShield,
		arg.Name,
		arg.Cost,
		arg.Weight,
		arg.DefenseModifier,
		arg.ID,
	)
}
