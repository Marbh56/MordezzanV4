// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: potion.sql

package db

import (
	"context"
	"database/sql"
)

const createPotion = `-- name: CreatePotion :execresult
INSERT INTO potions (
  name, description, uses, weight
) VALUES (
  ?, ?, ?, ?
)
`

type CreatePotionParams struct {
	Name        string
	Description string
	Uses        int64
	Weight      int64
}

func (q *Queries) CreatePotion(ctx context.Context, arg CreatePotionParams) (sql.Result, error) {
	return q.exec(ctx, q.createPotionStmt, createPotion,
		arg.Name,
		arg.Description,
		arg.Uses,
		arg.Weight,
	)
}

const deletePotion = `-- name: DeletePotion :execresult
DELETE FROM potions
WHERE id = ?
`

func (q *Queries) DeletePotion(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deletePotionStmt, deletePotion, id)
}

const getPotion = `-- name: GetPotion :one
SELECT id, name, description, uses, weight, created_at, updated_at FROM potions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPotion(ctx context.Context, id int64) (Potion, error) {
	row := q.queryRow(ctx, q.getPotionStmt, getPotion, id)
	var i Potion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Uses,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPotionByName = `-- name: GetPotionByName :one
SELECT id, name, description, uses, weight, created_at, updated_at FROM potions
WHERE name = ? LIMIT 1
`

func (q *Queries) GetPotionByName(ctx context.Context, name string) (Potion, error) {
	row := q.queryRow(ctx, q.getPotionByNameStmt, getPotionByName, name)
	var i Potion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Uses,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPotions = `-- name: ListPotions :many
SELECT id, name, description, uses, weight, created_at, updated_at FROM potions
ORDER BY name
`

func (q *Queries) ListPotions(ctx context.Context) ([]Potion, error) {
	rows, err := q.query(ctx, q.listPotionsStmt, listPotions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Potion{}
	for rows.Next() {
		var i Potion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Uses,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePotion = `-- name: UpdatePotion :execresult
UPDATE potions
SET name = ?,
    description = ?,
    uses = ?,
    weight = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdatePotionParams struct {
	Name        string
	Description string
	Uses        int64
	Weight      int64
	ID          int64
}

func (q *Queries) UpdatePotion(ctx context.Context, arg UpdatePotionParams) (sql.Result, error) {
	return q.exec(ctx, q.updatePotionStmt, updatePotion,
		arg.Name,
		arg.Description,
		arg.Uses,
		arg.Weight,
		arg.ID,
	)
}
