// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: fighter_data.sql

package db

import (
	"context"
)

const getFighterClassData = `-- name: GetFighterClassData :one
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability FROM fighter_class_data
WHERE level = ? LIMIT 1
`

func (q *Queries) GetFighterClassData(ctx context.Context, level int64) (FighterClassDatum, error) {
	row := q.queryRow(ctx, q.getFighterClassDataStmt, getFighterClassData, level)
	var i FighterClassDatum
	err := row.Scan(
		&i.Level,
		&i.ExperiencePoints,
		&i.HitDice,
		&i.SavingThrow,
		&i.FightingAbility,
	)
	return i, err
}

const getNextFighterLevel = `-- name: GetNextFighterLevel :one
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability FROM fighter_class_data
WHERE level > ? 
ORDER BY level ASC
LIMIT 1
`

func (q *Queries) GetNextFighterLevel(ctx context.Context, level int64) (FighterClassDatum, error) {
	row := q.queryRow(ctx, q.getNextFighterLevelStmt, getNextFighterLevel, level)
	var i FighterClassDatum
	err := row.Scan(
		&i.Level,
		&i.ExperiencePoints,
		&i.HitDice,
		&i.SavingThrow,
		&i.FightingAbility,
	)
	return i, err
}

const listFighterClassData = `-- name: ListFighterClassData :many
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability FROM fighter_class_data
ORDER BY level
`

func (q *Queries) ListFighterClassData(ctx context.Context) ([]FighterClassDatum, error) {
	rows, err := q.query(ctx, q.listFighterClassDataStmt, listFighterClassData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FighterClassDatum{}
	for rows.Next() {
		var i FighterClassDatum
		if err := rows.Scan(
			&i.Level,
			&i.ExperiencePoints,
			&i.HitDice,
			&i.SavingThrow,
			&i.FightingAbility,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
