// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: weapons.sql

package db

import (
	"context"
	"database/sql"
)

const createWeapon = `-- name: CreateWeapon :execresult
INSERT INTO weapons (
  name, category, weapon_class, cost, weight,  -- Changed from weight_class to weapon_class
  range_short, range_medium, range_long, rate_of_fire, 
  damage, damage_two_handed, properties
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateWeaponParams struct {
	Name            string
	Category        string
	WeaponClass     int64
	Cost            float64
	Weight          int64
	RangeShort      sql.NullInt64
	RangeMedium     sql.NullInt64
	RangeLong       sql.NullInt64
	RateOfFire      sql.NullString
	Damage          string
	DamageTwoHanded sql.NullString
	Properties      sql.NullString
}

func (q *Queries) CreateWeapon(ctx context.Context, arg CreateWeaponParams) (sql.Result, error) {
	return q.exec(ctx, q.createWeaponStmt, createWeapon,
		arg.Name,
		arg.Category,
		arg.WeaponClass,
		arg.Cost,
		arg.Weight,
		arg.RangeShort,
		arg.RangeMedium,
		arg.RangeLong,
		arg.RateOfFire,
		arg.Damage,
		arg.DamageTwoHanded,
		arg.Properties,
	)
}

const deleteWeapon = `-- name: DeleteWeapon :execresult
DELETE FROM weapons
WHERE id = ?
`

func (q *Queries) DeleteWeapon(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteWeaponStmt, deleteWeapon, id)
}

const getWeapon = `-- name: GetWeapon :one
SELECT id, name, category, weapon_class, cost, weight, range_short, range_medium, range_long, rate_of_fire, damage, damage_two_handed, properties, created_at, updated_at FROM weapons
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWeapon(ctx context.Context, id int64) (Weapon, error) {
	row := q.queryRow(ctx, q.getWeaponStmt, getWeapon, id)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.WeaponClass,
		&i.Cost,
		&i.Weight,
		&i.RangeShort,
		&i.RangeMedium,
		&i.RangeLong,
		&i.RateOfFire,
		&i.Damage,
		&i.DamageTwoHanded,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWeaponByName = `-- name: GetWeaponByName :one
SELECT id, name, category, weapon_class, cost, weight, range_short, range_medium, range_long, rate_of_fire, damage, damage_two_handed, properties, created_at, updated_at FROM weapons
WHERE name = ? LIMIT 1
`

func (q *Queries) GetWeaponByName(ctx context.Context, name string) (Weapon, error) {
	row := q.queryRow(ctx, q.getWeaponByNameStmt, getWeaponByName, name)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.WeaponClass,
		&i.Cost,
		&i.Weight,
		&i.RangeShort,
		&i.RangeMedium,
		&i.RangeLong,
		&i.RateOfFire,
		&i.Damage,
		&i.DamageTwoHanded,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWeapons = `-- name: ListWeapons :many
SELECT id, name, category, weapon_class, cost, weight, range_short, range_medium, range_long, rate_of_fire, damage, damage_two_handed, properties, created_at, updated_at FROM weapons
ORDER BY name
`

func (q *Queries) ListWeapons(ctx context.Context) ([]Weapon, error) {
	rows, err := q.query(ctx, q.listWeaponsStmt, listWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Weapon{}
	for rows.Next() {
		var i Weapon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.WeaponClass,
			&i.Cost,
			&i.Weight,
			&i.RangeShort,
			&i.RangeMedium,
			&i.RangeLong,
			&i.RateOfFire,
			&i.Damage,
			&i.DamageTwoHanded,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeapon = `-- name: UpdateWeapon :execresult
UPDATE weapons
SET name = ?,
    category = ?,
    weapon_class = ?,
    cost = ?,
    weight = ?,
    range_short = ?,
    range_medium = ?,
    range_long = ?,
    rate_of_fire = ?,
    damage = ?,
    damage_two_handed = ?,
    properties = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateWeaponParams struct {
	Name            string
	Category        string
	WeaponClass     int64
	Cost            float64
	Weight          int64
	RangeShort      sql.NullInt64
	RangeMedium     sql.NullInt64
	RangeLong       sql.NullInt64
	RateOfFire      sql.NullString
	Damage          string
	DamageTwoHanded sql.NullString
	Properties      sql.NullString
	ID              int64
}

func (q *Queries) UpdateWeapon(ctx context.Context, arg UpdateWeaponParams) (sql.Result, error) {
	return q.exec(ctx, q.updateWeaponStmt, updateWeapon,
		arg.Name,
		arg.Category,
		arg.WeaponClass,
		arg.Cost,
		arg.Weight,
		arg.RangeShort,
		arg.RangeMedium,
		arg.RangeLong,
		arg.RateOfFire,
		arg.Damage,
		arg.DamageTwoHanded,
		arg.Properties,
		arg.ID,
	)
}
