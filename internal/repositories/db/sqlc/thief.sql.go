// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: thief.sql

package db

import (
	"context"
)

const getNextThiefLevel = `-- name: GetNextThiefLevel :one
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability
FROM thief_class_data
WHERE level > ? 
ORDER BY level 
LIMIT 1
`

func (q *Queries) GetNextThiefLevel(ctx context.Context, level int64) (ThiefClassDatum, error) {
	row := q.queryRow(ctx, q.getNextThiefLevelStmt, getNextThiefLevel, level)
	var i ThiefClassDatum
	err := row.Scan(
		&i.Level,
		&i.ExperiencePoints,
		&i.HitDice,
		&i.SavingThrow,
		&i.FightingAbility,
	)
	return i, err
}

const getThiefClassData = `-- name: GetThiefClassData :one
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability
FROM thief_class_data
WHERE level = ? LIMIT 1
`

func (q *Queries) GetThiefClassData(ctx context.Context, level int64) (ThiefClassDatum, error) {
	row := q.queryRow(ctx, q.getThiefClassDataStmt, getThiefClassData, level)
	var i ThiefClassDatum
	err := row.Scan(
		&i.Level,
		&i.ExperiencePoints,
		&i.HitDice,
		&i.SavingThrow,
		&i.FightingAbility,
	)
	return i, err
}

const listThiefClassData = `-- name: ListThiefClassData :many
SELECT level, experience_points, hit_dice, saving_throw, fighting_ability
FROM thief_class_data
ORDER BY level
`

func (q *Queries) ListThiefClassData(ctx context.Context) ([]ThiefClassDatum, error) {
	rows, err := q.query(ctx, q.listThiefClassDataStmt, listThiefClassData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ThiefClassDatum{}
	for rows.Next() {
		var i ThiefClassDatum
		if err := rows.Scan(
			&i.Level,
			&i.ExperiencePoints,
			&i.HitDice,
			&i.SavingThrow,
			&i.FightingAbility,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
