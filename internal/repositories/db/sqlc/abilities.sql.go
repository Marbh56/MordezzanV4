// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: abilities.sql

package db

import (
	"context"
)

const getBarbarianAbilities = `-- name: GetBarbarianAbilities :many
SELECT id, name, description, min_level 
FROM barbarian_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all barbarian abilities available to a character based on their level
func (q *Queries) GetBarbarianAbilities(ctx context.Context, characterLevel int64) ([]BarbarianAbility, error) {
	rows, err := q.query(ctx, q.getBarbarianAbilitiesStmt, getBarbarianAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BarbarianAbility{}
	for rows.Next() {
		var i BarbarianAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBardAbilities = `-- name: GetBardAbilities :many
SELECT id, name, description, min_level 
FROM bard_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all bard abilities available to a character based on their level
func (q *Queries) GetBardAbilities(ctx context.Context, characterLevel int64) ([]BardAbility, error) {
	rows, err := q.query(ctx, q.getBardAbilitiesStmt, getBardAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BardAbility{}
	for rows.Next() {
		var i BardAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBerserkerAbilities = `-- name: GetBerserkerAbilities :many
SELECT id, name, description, min_level 
FROM berserker_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all berserker abilities available to a character based on their level
func (q *Queries) GetBerserkerAbilities(ctx context.Context, characterLevel int64) ([]BerserkerAbility, error) {
	rows, err := q.query(ctx, q.getBerserkerAbilitiesStmt, getBerserkerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BerserkerAbility{}
	for rows.Next() {
		var i BerserkerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCataphractAbilities = `-- name: GetCataphractAbilities :many
SELECT id, name, description, min_level 
FROM cataphract_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all cataphract abilities available to a character based on their level
func (q *Queries) GetCataphractAbilities(ctx context.Context, characterLevel int64) ([]CataphractAbility, error) {
	rows, err := q.query(ctx, q.getCataphractAbilitiesStmt, getCataphractAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CataphractAbility{}
	for rows.Next() {
		var i CataphractAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClericAbilities = `-- name: GetClericAbilities :many
SELECT id, name, description, min_level 
FROM cleric_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all cleric abilities available to a character based on their level
func (q *Queries) GetClericAbilities(ctx context.Context, characterLevel int64) ([]ClericAbility, error) {
	rows, err := q.query(ctx, q.getClericAbilitiesStmt, getClericAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClericAbility{}
	for rows.Next() {
		var i ClericAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCryomancerAbilities = `-- name: GetCryomancerAbilities :many
SELECT id, name, description, min_level 
FROM cryomancer_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all cryomancer abilities available to a character based on their level
func (q *Queries) GetCryomancerAbilities(ctx context.Context, characterLevel int64) ([]CryomancerAbility, error) {
	rows, err := q.query(ctx, q.getCryomancerAbilitiesStmt, getCryomancerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CryomancerAbility{}
	for rows.Next() {
		var i CryomancerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDruidAbilities = `-- name: GetDruidAbilities :many
SELECT id, name, description, min_level 
FROM druid_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all druid abilities available to a character based on their level
func (q *Queries) GetDruidAbilities(ctx context.Context, characterLevel int64) ([]DruidAbility, error) {
	rows, err := q.query(ctx, q.getDruidAbilitiesStmt, getDruidAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DruidAbility{}
	for rows.Next() {
		var i DruidAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFighterAbilities = `-- name: GetFighterAbilities :many
SELECT id, name, description, min_level 
FROM fighter_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all fighter abilities available to a character based on their level
func (q *Queries) GetFighterAbilities(ctx context.Context, characterLevel int64) ([]FighterAbility, error) {
	rows, err := q.query(ctx, q.getFighterAbilitiesStmt, getFighterAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FighterAbility{}
	for rows.Next() {
		var i FighterAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHuntsmanAbilities = `-- name: GetHuntsmanAbilities :many
SELECT id, name, description, min_level 
FROM huntsman_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all huntsman abilities available to a character based on their level
func (q *Queries) GetHuntsmanAbilities(ctx context.Context, characterLevel int64) ([]HuntsmanAbility, error) {
	rows, err := q.query(ctx, q.getHuntsmanAbilitiesStmt, getHuntsmanAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HuntsmanAbility{}
	for rows.Next() {
		var i HuntsmanAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIllusionistAbilities = `-- name: GetIllusionistAbilities :many
SELECT id, name, description, min_level 
FROM illusionist_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all illusionist abilities available to a character based on their level
func (q *Queries) GetIllusionistAbilities(ctx context.Context, characterLevel int64) ([]IllusionistAbility, error) {
	rows, err := q.query(ctx, q.getIllusionistAbilitiesStmt, getIllusionistAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IllusionistAbility{}
	for rows.Next() {
		var i IllusionistAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLegerdemainistAbilities = `-- name: GetLegerdemainistAbilities :many
SELECT id, name, description, min_level 
FROM legerdemainist_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all legerdemainist abilities available to a character based on their level
func (q *Queries) GetLegerdemainistAbilities(ctx context.Context, characterLevel int64) ([]LegerdemainistAbility, error) {
	rows, err := q.query(ctx, q.getLegerdemainistAbilitiesStmt, getLegerdemainistAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LegerdemainistAbility{}
	for rows.Next() {
		var i LegerdemainistAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMagicianAbilities = `-- name: GetMagicianAbilities :many
SELECT id, name, description, min_level 
FROM magician_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all magician abilities available to a character based on their level
func (q *Queries) GetMagicianAbilities(ctx context.Context, characterLevel int64) ([]MagicianAbility, error) {
	rows, err := q.query(ctx, q.getMagicianAbilitiesStmt, getMagicianAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MagicianAbility{}
	for rows.Next() {
		var i MagicianAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonkAbilities = `-- name: GetMonkAbilities :many
SELECT id, name, description, min_level 
FROM monk_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all monk abilities available to a character based on their level
func (q *Queries) GetMonkAbilities(ctx context.Context, characterLevel int64) ([]MonkAbility, error) {
	rows, err := q.query(ctx, q.getMonkAbilitiesStmt, getMonkAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MonkAbility{}
	for rows.Next() {
		var i MonkAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNecromancerAbilities = `-- name: GetNecromancerAbilities :many
SELECT id, name, description, min_level 
FROM necromancer_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all necromancer abilities available to a character based on their level
func (q *Queries) GetNecromancerAbilities(ctx context.Context, characterLevel int64) ([]NecromancerAbility, error) {
	rows, err := q.query(ctx, q.getNecromancerAbilitiesStmt, getNecromancerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NecromancerAbility{}
	for rows.Next() {
		var i NecromancerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaladinAbilities = `-- name: GetPaladinAbilities :many
SELECT id, name, description, min_level 
FROM paladin_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all paladin abilities available to a character based on their level
func (q *Queries) GetPaladinAbilities(ctx context.Context, characterLevel int64) ([]PaladinAbility, error) {
	rows, err := q.query(ctx, q.getPaladinAbilitiesStmt, getPaladinAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaladinAbility{}
	for rows.Next() {
		var i PaladinAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPriestAbilities = `-- name: GetPriestAbilities :many
SELECT id, name, description, min_level 
FROM priest_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all priest abilities available to a character based on their level
func (q *Queries) GetPriestAbilities(ctx context.Context, characterLevel int64) ([]PriestAbility, error) {
	rows, err := q.query(ctx, q.getPriestAbilitiesStmt, getPriestAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriestAbility{}
	for rows.Next() {
		var i PriestAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurloinerAbilities = `-- name: GetPurloinerAbilities :many
SELECT id, name, description, min_level 
FROM purloiner_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all purloiner abilities available to a character based on their level
func (q *Queries) GetPurloinerAbilities(ctx context.Context, characterLevel int64) ([]PurloinerAbility, error) {
	rows, err := q.query(ctx, q.getPurloinerAbilitiesStmt, getPurloinerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurloinerAbility{}
	for rows.Next() {
		var i PurloinerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPyromancerAbilities = `-- name: GetPyromancerAbilities :many
SELECT id, name, description, min_level 
FROM pyromancer_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all pyromancer abilities available to a character based on their level
func (q *Queries) GetPyromancerAbilities(ctx context.Context, characterLevel int64) ([]PyromancerAbility, error) {
	rows, err := q.query(ctx, q.getPyromancerAbilitiesStmt, getPyromancerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PyromancerAbility{}
	for rows.Next() {
		var i PyromancerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRangerAbilities = `-- name: GetRangerAbilities :many
SELECT id, name, description, min_level 
FROM ranger_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all ranger abilities available to a character based on their level
func (q *Queries) GetRangerAbilities(ctx context.Context, characterLevel int64) ([]RangerAbility, error) {
	rows, err := q.query(ctx, q.getRangerAbilitiesStmt, getRangerAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RangerAbility{}
	for rows.Next() {
		var i RangerAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunegraverAbilities = `-- name: GetRunegraverAbilities :many
SELECT id, name, description, min_level 
FROM runegraver_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all runegraver abilities available to a character based on their level
func (q *Queries) GetRunegraverAbilities(ctx context.Context, characterLevel int64) ([]RunegraverAbility, error) {
	rows, err := q.query(ctx, q.getRunegraverAbilitiesStmt, getRunegraverAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RunegraverAbility{}
	for rows.Next() {
		var i RunegraverAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoutAbilities = `-- name: GetScoutAbilities :many
SELECT id, name, description, min_level 
FROM scout_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all scout abilities available to a character based on their level
func (q *Queries) GetScoutAbilities(ctx context.Context, characterLevel int64) ([]ScoutAbility, error) {
	rows, err := q.query(ctx, q.getScoutAbilitiesStmt, getScoutAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScoutAbility{}
	for rows.Next() {
		var i ScoutAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShamanAbilities = `-- name: GetShamanAbilities :many
SELECT id, name, description, min_level 
FROM shaman_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all shaman abilities available to a character based on their level
func (q *Queries) GetShamanAbilities(ctx context.Context, characterLevel int64) ([]ShamanAbility, error) {
	rows, err := q.query(ctx, q.getShamanAbilitiesStmt, getShamanAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShamanAbility{}
	for rows.Next() {
		var i ShamanAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThiefAbilities = `-- name: GetThiefAbilities :many
SELECT id, name, description, min_level 
FROM thief_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all thief abilities available to a character based on their level
func (q *Queries) GetThiefAbilities(ctx context.Context, characterLevel int64) ([]ThiefAbility, error) {
	rows, err := q.query(ctx, q.getThiefAbilitiesStmt, getThiefAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ThiefAbility{}
	for rows.Next() {
		var i ThiefAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWarlockAbilities = `-- name: GetWarlockAbilities :many
SELECT id, name, description, min_level 
FROM warlock_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all warlock abilities available to a character based on their level
func (q *Queries) GetWarlockAbilities(ctx context.Context, characterLevel int64) ([]WarlockAbility, error) {
	rows, err := q.query(ctx, q.getWarlockAbilitiesStmt, getWarlockAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WarlockAbility{}
	for rows.Next() {
		var i WarlockAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWitchAbilities = `-- name: GetWitchAbilities :many
SELECT id, name, description, min_level 
FROM witch_abilities
WHERE min_level <= ?1
ORDER BY min_level, name
`

// Gets all witch abilities available to a character based on their level
func (q *Queries) GetWitchAbilities(ctx context.Context, characterLevel int64) ([]WitchAbility, error) {
	rows, err := q.query(ctx, q.getWitchAbilitiesStmt, getWitchAbilities, characterLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WitchAbility{}
	for rows.Next() {
		var i WitchAbility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MinLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
