// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spellbooks.sql

package db

import (
	"context"
	"database/sql"
)

const addSpellToSpellbook = `-- name: AddSpellToSpellbook :exec
INSERT INTO spellbook_spells (spellbook_id, spell_id, character_class, pages_used)
VALUES (?, ?, ?, ?)
`

type AddSpellToSpellbookParams struct {
	SpellbookID    int64
	SpellID        int64
	CharacterClass string
	PagesUsed      int64
}

func (q *Queries) AddSpellToSpellbook(ctx context.Context, arg AddSpellToSpellbookParams) error {
	_, err := q.exec(ctx, q.addSpellToSpellbookStmt, addSpellToSpellbook,
		arg.SpellbookID,
		arg.SpellID,
		arg.CharacterClass,
		arg.PagesUsed,
	)
	return err
}

const createSpellbook = `-- name: CreateSpellbook :execresult
INSERT INTO spellbooks (
    name, description, total_pages, used_pages, value, weight
) VALUES (
    ?, ?, ?, 0, ?, ?
)
`

type CreateSpellbookParams struct {
	Name        string
	Description sql.NullString
	TotalPages  int64
	Value       int64
	Weight      float64
}

func (q *Queries) CreateSpellbook(ctx context.Context, arg CreateSpellbookParams) (sql.Result, error) {
	return q.exec(ctx, q.createSpellbookStmt, createSpellbook,
		arg.Name,
		arg.Description,
		arg.TotalPages,
		arg.Value,
		arg.Weight,
	)
}

const deleteAllSpellsFromSpellbook = `-- name: DeleteAllSpellsFromSpellbook :exec
DELETE FROM spellbook_spells
WHERE spellbook_id = ?
`

func (q *Queries) DeleteAllSpellsFromSpellbook(ctx context.Context, spellbookID int64) error {
	_, err := q.exec(ctx, q.deleteAllSpellsFromSpellbookStmt, deleteAllSpellsFromSpellbook, spellbookID)
	return err
}

const deleteSpellbook = `-- name: DeleteSpellbook :exec
DELETE FROM spellbooks WHERE id = ?
`

func (q *Queries) DeleteSpellbook(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteSpellbookStmt, deleteSpellbook, id)
	return err
}

const getSpellFromSpellbook = `-- name: GetSpellFromSpellbook :one
SELECT id, spellbook_id, spell_id, character_class, pages_used FROM spellbook_spells
WHERE spellbook_id = ? AND spell_id = ? LIMIT 1
`

type GetSpellFromSpellbookParams struct {
	SpellbookID int64
	SpellID     int64
}

func (q *Queries) GetSpellFromSpellbook(ctx context.Context, arg GetSpellFromSpellbookParams) (SpellbookSpell, error) {
	row := q.queryRow(ctx, q.getSpellFromSpellbookStmt, getSpellFromSpellbook, arg.SpellbookID, arg.SpellID)
	var i SpellbookSpell
	err := row.Scan(
		&i.ID,
		&i.SpellbookID,
		&i.SpellID,
		&i.CharacterClass,
		&i.PagesUsed,
	)
	return i, err
}

const getSpellbook = `-- name: GetSpellbook :one
SELECT id, name, description, total_pages, used_pages, value, weight, created_at, updated_at FROM spellbooks WHERE id = ? LIMIT 1
`

func (q *Queries) GetSpellbook(ctx context.Context, id int64) (Spellbook, error) {
	row := q.queryRow(ctx, q.getSpellbookStmt, getSpellbook, id)
	var i Spellbook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalPages,
		&i.UsedPages,
		&i.Value,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpellbookByName = `-- name: GetSpellbookByName :one
SELECT id, name, description, total_pages, used_pages, value, weight, created_at, updated_at FROM spellbooks WHERE name = ? LIMIT 1
`

func (q *Queries) GetSpellbookByName(ctx context.Context, name string) (Spellbook, error) {
	row := q.queryRow(ctx, q.getSpellbookByNameStmt, getSpellbookByName, name)
	var i Spellbook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalPages,
		&i.UsedPages,
		&i.Value,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpellsInSpellbook = `-- name: GetSpellsInSpellbook :many
SELECT spell_id FROM spellbook_spells
WHERE spellbook_id = ?
ORDER BY spell_id
`

func (q *Queries) GetSpellsInSpellbook(ctx context.Context, spellbookID int64) ([]int64, error) {
	rows, err := q.query(ctx, q.getSpellsInSpellbookStmt, getSpellsInSpellbook, spellbookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var spell_id int64
		if err := rows.Scan(&spell_id); err != nil {
			return nil, err
		}
		items = append(items, spell_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpellbooks = `-- name: ListSpellbooks :many
SELECT id, name, description, total_pages, used_pages, value, weight, created_at, updated_at FROM spellbooks ORDER BY name
`

func (q *Queries) ListSpellbooks(ctx context.Context) ([]Spellbook, error) {
	rows, err := q.query(ctx, q.listSpellbooksStmt, listSpellbooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Spellbook{}
	for rows.Next() {
		var i Spellbook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalPages,
			&i.UsedPages,
			&i.Value,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSpellFromSpellbook = `-- name: RemoveSpellFromSpellbook :exec
DELETE FROM spellbook_spells
WHERE spellbook_id = ? AND spell_id = ?
`

type RemoveSpellFromSpellbookParams struct {
	SpellbookID int64
	SpellID     int64
}

func (q *Queries) RemoveSpellFromSpellbook(ctx context.Context, arg RemoveSpellFromSpellbookParams) error {
	_, err := q.exec(ctx, q.removeSpellFromSpellbookStmt, removeSpellFromSpellbook, arg.SpellbookID, arg.SpellID)
	return err
}

const updateSpellbook = `-- name: UpdateSpellbook :exec
UPDATE spellbooks
SET name = ?, description = ?, total_pages = ?, used_pages = ?, value = ?, weight = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateSpellbookParams struct {
	Name        string
	Description sql.NullString
	TotalPages  int64
	UsedPages   int64
	Value       int64
	Weight      float64
	ID          int64
}

func (q *Queries) UpdateSpellbook(ctx context.Context, arg UpdateSpellbookParams) error {
	_, err := q.exec(ctx, q.updateSpellbookStmt, updateSpellbook,
		arg.Name,
		arg.Description,
		arg.TotalPages,
		arg.UsedPages,
		arg.Value,
		arg.Weight,
		arg.ID,
	)
	return err
}

const updateSpellbookUsedPages = `-- name: UpdateSpellbookUsedPages :exec
UPDATE spellbooks
SET used_pages = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateSpellbookUsedPagesParams struct {
	UsedPages int64
	ID        int64
}

func (q *Queries) UpdateSpellbookUsedPages(ctx context.Context, arg UpdateSpellbookUsedPagesParams) error {
	_, err := q.exec(ctx, q.updateSpellbookUsedPagesStmt, updateSpellbookUsedPages, arg.UsedPages, arg.ID)
	return err
}
